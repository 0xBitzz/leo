var searchIndex = JSON.parse('{\
"errcov":{"doc":"","t":[5],"n":["main"],"q":["errcov"],"d":[""],"i":[0],"f":[[[]]],"p":[]},\
"leo":{"doc":"","t":[13,3,13,4,13,13,12,11,11,11,11,11,11,11,11,12,0,0,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,0,5,12,12,5,5,11,11,11,11,11,11,11,11,11,11,0,11,11,12,12,12,12,17,2,2,8,16,6,2,16,2,10,0,0,11,11,0,10,0,11,3,3,11,11,11,11,11,11,11,11,11,11,11,5,12,11,11,11,11,11,11,11,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,3,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,3,7,12,11,11,11,11,11,11,11,12,12,12,12,11,11,12,11,11,11,5,11,12,11,11,11,11,11,11,11,11,11,11,11,11,18,18,18,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Build","CLI","Clean","Commands","New","Run","api","augment_args","augment_args_for_update","augment_subcommands","augment_subcommands_for_update","borrow","borrow","borrow_mut","borrow_mut","command","commands","context","debug","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","from_arg_matches","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","handle_error","has_subcommand","init","init","into","into","into_app","into_app","into_app_for_update","into_app_for_update","logger","main","path","quiet","run_with_args","set_panic_hook","try_from","try_from","try_into","try_into","type_id","type_id","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","updater","vzip","vzip","command","command","command","command","ALEO_CLI_COMMAND","Build","Clean","Command","Input","Network","New","Output","Run","apply","build","clean","execute","log_span","new","prelude","run","try_execute","Build","BuildOptions","apply","augment_args","augment_args","augment_args_for_update","augment_args_for_update","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","compile_leo_file","compiler_options","default","deref","deref","deref_mut","deref_mut","drop","drop","enable_all_ast_snapshots","enable_code_generation","enable_initial_ast_snapshot","enable_initial_input_ast_snapshot","enable_spans","enable_ssa_ast_snapshot","enable_unrolled_ast_snapshot","fmt","fmt","from","from","from_arg_matches","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","init","init","into","into","into_app","into_app","into_app_for_update","into_app_for_update","log_span","prelude","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","vzip","vzip","Clean","apply","augment_args","augment_args_for_update","borrow","borrow_mut","deref","deref_mut","drop","fmt","from","from_arg_matches","from_arg_matches_mut","init","into","into_app","into_app_for_update","log_span","prelude","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","vzip","New","apply","augment_args","augment_args_for_update","borrow","borrow_mut","deref","deref_mut","drop","fmt","from","from_arg_matches","from_arg_matches_mut","init","into","into_app","into_app_for_update","log_span","name","prelude","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","vzip","Run","apply","augment_args","augment_args_for_update","borrow","borrow_mut","compiler_options","deref","deref_mut","drop","fmt","from","from_arg_matches","from_arg_matches_mut","init","into","into_app","into_app_for_update","log_span","name","prelude","skip_key_check","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","vzip","Context","borrow","borrow_mut","clone","clone_into","deref","deref_mut","dir","drop","from","init","into","new","open_manifest","path","to_owned","try_from","try_into","type_id","vzip","Format","START","ansi","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","display_level","display_target","display_thread_id","display_thread_name","drop","fmt","format","format_event","from","init","init_logger","into","timer","to_owned","try_from","try_into","type_id","vzip","with_ansi","with_level","with_target","with_thread_ids","with_thread_names","with_timer","without_time","LEO_BIN_NAME","LEO_REPO_NAME","LEO_REPO_OWNER","Updater","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","print_cli","show_available_releases","try_from","try_into","type_id","update_available","update_to_latest_release","vzip"],"q":["leo","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo::Commands","","","","leo::commands","","","","","","","","","","","","","","","","","","leo::commands::build","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo::commands::clean","","","","","","","","","","","","","","","","","","","","","","","","","leo::commands::new","","","","","","","","","","","","","","","","","","","","","","","","","","leo::commands::run","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo::context","","","","","","","","","","","","","","","","","","","","leo::logger","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo::updater","","","","","","","","","","","","","","","","","","",""],"d":["","CLI Arguments entry point - includes global parameters and …","","Leo compiler and package manager","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Run command with custom build arguments.","","","","","","","","","","","","","","","","","","","","","","Base trait for the Leo CLI, see methods and their …","If the current command requires running another command …","","","Defines the output of this command, which may be used as …","","Runs the main operation of this command. This function is …","","","A wrapper around the <code>apply</code> method. This function sets up …","Adds a span to the logger via <code>tracing::span</code>. Because of …","","Runs the prelude and returns the Input of the current …","","Executes command but empty the result. Comes in handy …","Compile and build program command.","Compiler Options wrapper for Build command. Also used by …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Clean outputs folder command","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","Create new Leo project","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Build, Prove and Run Leo program with inputs","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Project context, manifest, current directory etc All the …","","","","","","","Returns the path to the Leo package.","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Returns the package name as a String. Opens the manifest …","Path at which the command is called, None when default","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Initialize logger with custom format and verbosity.","Calls <code>U::from(self)</code>.","","","","","","","Enable ANSI terminal colors for formatted output.","Sets whether or not an event’s level is displayed.","Sets whether or not an event’s target is displayed.","Sets whether or not the thread ID of the current thread is …","Sets whether or not the name of the current thread is …","Use the given <code>timer</code> for log message timestamps.","Do not emit timestamps with log messages.","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Display the CLI message, if the Leo configuration allows.","Show all available releases for <code>leo</code>.","","","","Check if there is an available update for <code>leo</code> and return …","Update <code>leo</code> to the latest release.",""],"i":[1,0,1,0,1,1,2,2,2,1,1,2,1,2,1,2,0,0,2,2,1,2,1,2,1,2,1,2,1,2,1,2,1,0,1,2,1,2,1,2,1,2,1,0,0,2,2,0,0,2,1,2,1,2,1,2,1,2,1,0,2,1,3,4,5,6,0,0,0,0,7,0,0,7,0,7,0,0,7,7,0,7,0,7,0,0,8,9,8,9,8,9,8,9,8,9,9,0,8,9,9,8,9,8,9,8,9,9,9,9,9,9,9,9,8,9,8,9,8,9,8,9,8,9,8,9,8,9,8,8,8,9,9,8,9,8,9,8,9,8,9,8,9,8,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,0,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15,15,15,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15],"f":[null,null,null,null,null,null,null,[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,null,null,null,[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["argmatches",3]],["result",4,[["error",3]]]],[[["argmatches",3]],["result",4,[["error",3]]]],[[["argmatches",3]],["result",4,[["error",3]]]],[[["argmatches",3]],["result",4,[["error",3]]]],[[["result",6]]],[[["str",0]],["bool",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[],["command",6]],[[],["command",6]],[[],["command",6]],[[],["command",6]],null,[[]],null,null,[[["cli",3]],["result",6]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],null,[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[["context",3]],["result",6]],null,null,[[["context",3]],["result",6]],[[["",0]],["span",3]],null,[[["",0],["context",3]],["result",6]],null,[[["context",3]],["result",6]],null,null,[[["context",3]],["result",6]],[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["buildoptions",3]],[[["",0],["",0]]],[[["pathbuf",3],["path",3],["string",3],["path",3],["path",3],["handler",3],["buildoptions",3]],["result",6,[["indexmap",3,[["symbol",3],["circuit",3]]]]]],null,[[],["buildoptions",3]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],null,null,null,null,null,null,null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["argmatches",3]],["result",4,[["error",3]]]],[[["argmatches",3]],["result",4,[["error",3]]]],[[["argmatches",3]],["result",4,[["error",3]]]],[[["argmatches",3]],["result",4,[["error",3]]]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[],["command",6]],[[],["command",6]],[[],["command",6]],[[],["command",6]],[[["",0]],["span",3]],[[["",0],["context",3]],["result",6]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],[[]],[[]],null,[[["context",3]],["result",6]],[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[]],[[["argmatches",3]],["result",4,[["error",3]]]],[[["argmatches",3]],["result",4,[["error",3]]]],[[],["usize",0]],[[]],[[],["command",6]],[[],["command",6]],[[["",0]],["span",3]],[[["",0],["context",3]],["result",6]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],[[]],null,[[["context",3]],["result",6]],[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[]],[[["argmatches",3]],["result",4,[["error",3]]]],[[["argmatches",3]],["result",4,[["error",3]]]],[[],["usize",0]],[[]],[[],["command",6]],[[],["command",6]],[[["",0]],["span",3]],null,[[["",0],["context",3]],["result",6]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],[[]],null,[[["context",3]],["result",6]],[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[]],[[["argmatches",3]],["result",4,[["error",3]]]],[[["argmatches",3]],["result",4,[["error",3]]]],[[],["usize",0]],[[]],[[],["command",6]],[[],["command",6]],[[["",0]],["span",3]],null,[[["",0],["context",3]],["result",6]],null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],[[]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["context",3]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["",0]],["result",6,[["pathbuf",3]]]],[[["usize",0]]],[[]],[[],["usize",0]],[[]],[[["option",4,[["pathbuf",3]]]],["result",6,[["context",3]]]],[[["",0]],["result",6,[["manifest",3,[["testnet3",3]]]]]],null,[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["format",3]],[[["",0],["",0]]],[[]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],null,null,null,null,[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],null,[[["",0],["fmtcontext",3],["writer",3],["event",3]],["result",6]],[[]],[[],["usize",0]],[[["str",0],["usize",0]],["result",6]],[[]],null,[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],[[["bool",0]],["format",3]],[[["bool",0]],["format",3]],[[["bool",0]],["format",3]],[[["bool",0]],["format",3]],[[["bool",0]],["format",3]],[[],["format",3]],[[],["format",3]],null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[]],[[],["usize",0]],[[]],[[]],[[],["result",6]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[],["result",6,[["string",3]]]],[[["bool",0]],["result",6,[["status",4]]]],[[]]],"p":[[4,"Commands"],[3,"CLI"],[13,"New"],[13,"Build"],[13,"Clean"],[13,"Run"],[8,"Command"],[3,"Build"],[3,"BuildOptions"],[3,"Clean"],[3,"New"],[3,"Run"],[3,"Context"],[3,"Format"],[3,"Updater"]]},\
"leo_abnf":{"doc":"","t":[13,13,13,3,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,5,11,12,5,11,12,12,11,11,11,11,11,11,11,11,12],"n":["Code","Definition","Free","Processor","Scope","append_str","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","enter_scope","fmt","fmt","from","from","grammar","into","into","line","main","new","out","parse_abnf_node","process","rules","scope","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","0"],"q":["leo_abnf","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_abnf::Scope"],"d":["","","","Transforms abnf file into Markdown.","Processor’s scope. Used when code block or definition …","Append new line into output, add newline character.","","","","","","","","","Enter new scope (definition or code block). Allows …","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Recursively parse ABNF Node and fill sum vec with found …","Main function for this struct. Goes through each line and …","","","","","","","","","","",""],"i":[1,1,1,0,0,2,1,2,1,2,1,2,1,2,2,1,2,1,2,2,1,2,2,0,2,2,0,2,2,2,1,2,1,2,1,2,1,2,3],"f":[null,null,null,null,null,[[["",0],["str",0]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["scope",4]],[[["",0]],["processor",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["scope",4]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],null,[[]],[[]],null,[[],["result",6]],[[["str",0],["vec",3,[["rule",3]]]],["processor",3]],null,[[["node",4],["vec",3]]],[[["",0]]],null,null,[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null],"p":[[4,"Scope"],[3,"Processor"],[13,"Definition"]]},\
"leo_ast":{"doc":"The abstract syntax tree (ast) for a Leo program.","t":[3,8,0,11,11,12,11,11,0,11,11,0,11,11,11,11,11,11,0,11,11,11,11,0,0,11,0,11,11,11,11,0,5,0,0,5,11,11,10,14,14,10,0,11,11,11,11,11,11,11,11,0,0,3,3,3,3,12,0,0,12,12,0,12,12,12,12,12,12,12,12,0,12,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,12,11,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,12,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,12,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,12,11,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,11,11,11,11,12,11,11,11,11,11,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,0,0,0,0,0,5,5,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,5,5,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,4,13,13,13,13,13,13,13,3,4,13,13,13,13,3,13,3,3,13,13,13,13,13,3,4,13,13,13,13,13,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,13,13,3,13,13,13,13,13,13,3,4,13,0,12,0,11,11,0,0,11,11,12,11,11,11,11,12,11,11,0,12,11,11,11,12,12,12,12,11,11,12,0,12,12,11,12,12,12,12,11,11,11,12,12,12,12,12,12,12,0,11,11,11,11,0,11,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,4,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,13,13,13,3,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,12,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,13,13,13,13,13,13,13,13,13,4,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,12,11,11,11,11,11,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,13,13,13,13,13,13,13,13,3,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,0,0,3,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,12,11,11,11,12,11,11,11,11,11,0,0,13,3,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,0,0,4,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,4,3,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,12,12,12,12,6,0,0,0,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,12,11,11,11,12,11,12,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,13,13,13,13,4,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,3,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,8,10,10,0,0,16,8,8,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,16,8,16,8,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,12,11,11,11,11,11,11,11,11,11,12,11,11,11,12,12,11,11,12,11,12,11,11,11,11,11,11,0,0,0,0,0,0,0,0,13,13,13,4,3,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,3,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,12,11,11,11,11,11,0,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,12,11,11,11,11,11,13,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,13,4,3,13,11,11,11,11,0,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,12,12,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,12,12,12,12,11,11,11,11,12,11,12,3,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,13,13,13,13,13,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,0,0,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12],"n":["Ast","Node","access","as_ref","as_repr","ast","borrow","borrow_mut","circuits","clone","clone_into","common","default","deref","deref_mut","drop","eq","equivalent","expressions","fmt","from","from_json_file","from_json_string","functions","groups","init","input","into","into_repr","ne","new","node","normalize_json_value","passes","program","remove_key_from_json","set_network","set_program_name","set_span","simple_node_impl","simple_node_impl","span","statements","to_json_file","to_json_file_without_keys","to_json_string","to_json_value","to_owned","try_from","try_into","type_id","types","value","AssociatedConstant","AssociatedFunction","MemberAccess","TupleAccess","args","associated_constant_access","associated_function_access","index","inner","member_access","name","name","name","span","span","span","span","tuple","tuple_access","ty","ty","AssociatedConstant","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","fmt","fmt","from","init","into","name","ne","serialize","set_span","span","span","to_owned","to_string","try_from","try_into","ty","type_id","AssociatedFunction","args","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","fmt","fmt","from","init","into","name","ne","serialize","set_span","span","span","to_owned","to_string","try_from","try_into","ty","type_id","MemberAccess","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","fmt","fmt","from","init","inner","into","name","ne","serialize","set_span","span","span","to_owned","to_string","try_from","try_into","type_id","TupleAccess","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","fmt","fmt","from","index","init","into","ne","serialize","set_span","span","span","to_owned","to_string","try_from","try_into","tuple","type_id","circuit","circuit_member","Circuit","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","fmt","fmt","from","identifier","init","into","is_record","members","name","serialize","set_span","span","span","to_owned","to_string","try_from","try_into","type_id","CircuitMember","CircuitVariable","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","fmt","fmt","from","init","into","name","ne","serialize","to_owned","to_string","try_from","try_into","type_id","0","1","global_consts_json","identifier","imported_modules","positive_number","static_string","deserialize","serialize","Identifier","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","fmt","fmt","from","get_hash","hash","init","into","matches","name","new","serialize","set_span","span","span","to_owned","to_string","try_from","try_into","type_id","deserialize","serialize","PositiveNumber","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","fmt","fmt","from","get_hash","hash","init","into","is_zero","ne","serialize","to_owned","to_string","to_usize","try_from","try_into","type_id","value","0","StaticString","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","deserialize","drop","eq","equivalent","fmt","fmt","from","init","into","ne","new","serialize","to_owned","to_string","try_from","try_into","type_id","Abs","AbsWrapped","Access","AccessExpression","Add","AddWrapped","Address","And","AssociatedConstant","AssociatedFunction","Binary","BinaryExpression","BinaryOperation","BitwiseAnd","BitwiseOr","Boolean","Call","CallExpression","Circuit","CircuitExpression","CircuitVariableInitializer","Div","DivWrapped","Double","Eq","Err","ErrExpression","Expression","Field","Group","Gt","Gte","I128","I16","I32","I64","I8","Identifier","Inverse","Literal","Literal","Lt","Lte","Member","Mod","Mul","MulWrapped","Nand","Negate","Neq","Nor","Not","Or","Pow","PowWrapped","Rem","RemWrapped","Scalar","Shl","ShlWrapped","Shr","ShrWrapped","Square","SquareRoot","String","Sub","SubWrapped","Ternary","TernaryExpression","Tuple","Tuple","TupleExpression","U128","U16","U32","U64","U8","Unary","UnaryExpression","UnaryOperation","Xor","access","arguments","binary","borrow","borrow_mut","call","circuit_init","clone","clone_into","condition","deref","deref_mut","deserialize","drop","elements","eq","equivalent","err","expression","fmt","fmt","from","function","identifier","if_false","if_true","init","into","left","literal","members","name","ne","op","op","receiver","right","serialize","set_span","span","span","span","span","span","span","span","span","ternary","to_owned","to_string","try_from","try_into","tuple_init","type_id","unary","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","AccessExpression","AssociatedConstant","AssociatedFunction","Member","Tuple","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","fmt","fmt","from","init","into","ne","serialize","set_span","span","to_owned","to_string","try_from","try_into","type_id","0","0","0","0","Add","AddWrapped","And","BinaryExpression","BinaryOperation","BitwiseAnd","BitwiseOr","Div","DivWrapped","Eq","Gt","Gte","Lt","Lte","Mod","Mul","MulWrapped","Nand","Neq","Nor","Or","Pow","PowWrapped","Rem","RemWrapped","Shl","ShlWrapped","Shr","ShrWrapped","Sub","SubWrapped","Xor","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from_symbol","init","init","into","into","left","ne","op","right","serialize","serialize","set_span","span","span","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","CallExpression","arguments","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","fmt","fmt","from","function","init","into","ne","serialize","set_span","span","span","to_owned","to_string","try_from","try_into","type_id","CircuitExpression","CircuitVariableInitializer","borrow","borrow","borrow_mut","borrow_mut","check_record","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","expression","fmt","fmt","fmt","fmt","from","from","identifier","init","init","into","into","members","name","ne","ne","serialize","serialize","set_span","span","span","to_owned","to_owned","to_record_string","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","ErrExpression","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","fmt","fmt","from","init","into","ne","serialize","set_span","span","span","to_owned","to_string","try_from","try_into","type_id","Address","Boolean","Field","Group","I128","I16","I32","I64","I8","Literal","Scalar","String","U128","U16","U32","U64","U8","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","fmt","fmt","from","from","init","into","ne","serialize","set_span","span","to_owned","to_string","try_from","try_into","type_id","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","TernaryExpression","borrow","borrow_mut","clone","clone_into","condition","deref","deref_mut","deserialize","drop","eq","equivalent","fmt","fmt","from","if_false","if_true","init","into","ne","serialize","set_span","span","span","to_owned","to_string","try_from","try_into","type_id","TupleExpression","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","elements","eq","equivalent","fmt","fmt","from","init","into","ne","serialize","set_span","span","span","to_owned","to_string","try_from","try_into","type_id","Abs","AbsWrapped","Double","Inverse","Negate","Not","Square","SquareRoot","UnaryExpression","UnaryOperation","as_str","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","fmt","fmt","fmt","from","from","from_symbol","init","init","into","into","ne","op","receiver","serialize","serialize","set_span","span","span","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","function","input","Function","block","borrow","borrow_mut","clone","clone_into","core_mapping","deref","deref_mut","deserialize","drop","eq","equivalent","fmt","fmt","format","from","identifier","init","input","into","is_main","name","output","serialize","set_span","span","span","to_owned","to_string","try_from","try_into","type_id","function_input","input_variable","Const","FunctionInputVariable","ParamMode","Private","Public","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","format","from","from","identifier","init","init","into","into","mode","mode","ne","new","serialize","serialize","set_span","span","span","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_","type_id","type_id","FunctionInput","Variable","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","fmt","fmt","format","from","get_variable","init","into","serialize","set_span","span","to_owned","to_string","try_from","try_into","type_id","0","group_coordinate","group_literal","GroupCoordinate","Inferred","Number","SignHigh","SignLow","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","fmt","fmt","from","init","into","ne","serialize","to_owned","to_string","try_from","try_into","type_id","0","1","GroupLiteral","GroupTuple","Single","Tuple","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","fmt","fmt","fmt","from","from","init","init","into","into","ne","ne","serialize","serialize","set_span","span","span","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","x","y","0","0","1","Definitions","definition","input_ast","input_value","program_input","section","Definition","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","fmt","from","init","into","mode","name","ne","serialize","span","to_owned","try_from","try_into","type_","type_id","value","Input","InputAst","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","fmt","fmt","from","from","init","init","into","into","program_input","program_inputs","sections","serialize","serialize","to_json_file","to_json_file_without_keys","to_json_string","to_json_value","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Address","Boolean","Field","Group","I128","I16","I32","I64","I8","InputValue","U128","U16","U32","U64","U8","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","fmt","fmt","from","init","into","ne","serialize","to_owned","to_string","try_from","try_from","try_into","type_id","0","0","0","0","0","0","0","0","0","0","0","0","0","0","ProgramInput","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","deserialize","drop","fmt","from","init","into","main","serialize","to_owned","try_from","try_from","try_into","type_id","Section","borrow","borrow_mut","clone","clone_into","definitions","deref","deref_mut","deserialize","drop","fmt","from","init","into","name","name","serialize","span","to_owned","try_from","try_into","type_id","Node","set_span","span","reconstructor","visitor","AdditionalOutput","ExpressionReconstructor","ProgramReconstructor","StatementReconstructor","reconstruct_access","reconstruct_assign","reconstruct_binary","reconstruct_block","reconstruct_call","reconstruct_circuit","reconstruct_circuit_init","reconstruct_conditional","reconstruct_console","reconstruct_definition","reconstruct_err","reconstruct_expression","reconstruct_function","reconstruct_identifier","reconstruct_import","reconstruct_iteration","reconstruct_literal","reconstruct_program","reconstruct_return","reconstruct_statement","reconstruct_ternary","reconstruct_tuple","reconstruct_unary","AdditionalInput","ExpressionVisitor","Output","ProgramVisitor","StatementVisitor","visit_access","visit_assign","visit_binary","visit_block","visit_call","visit_circuit","visit_circuit_init","visit_conditional","visit_console","visit_definition","visit_err","visit_expression","visit_function","visit_identifier","visit_import","visit_iteration","visit_literal","visit_program","visit_return","visit_statement","visit_ternary","visit_tuple","visit_unary","Program","borrow","borrow_mut","circuits","clone","clone_into","default","deref","deref_mut","deserialize","drop","eq","equivalent","expected_input","fmt","fmt","from","functions","imports","init","into","name","ne","network","serialize","to_owned","to_string","try_from","try_into","type_id","assign","block","conditional","console","definition","iteration","return_statement","statement","Add","And","Assign","AssignOperation","AssignStatement","BitAnd","BitOr","BitXor","Div","Mul","Or","Pow","Rem","Shl","Shr","Sub","as_ref","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","fmt","fmt","fmt","from","from","init","init","into","into","into_binary_operation","ne","operation","place","serialize","serialize","set_span","span","span","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","value","Block","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","fmt","fmt","from","init","into","ne","serialize","set_span","span","span","statements","to_owned","to_string","try_from","try_into","type_id","ConditionalStatement","borrow","borrow_mut","clone","clone_into","condition","deref","deref_mut","deserialize","drop","eq","equivalent","fmt","fmt","from","init","into","ne","otherwise","serialize","set_span","span","span","then","to_owned","to_string","try_from","try_into","type_id","console_args","console_function","console_statement","ConsoleArgs","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","fmt","fmt","from","init","into","ne","parameters","serialize","set_span","span","span","string","to_owned","to_string","try_from","try_into","type_id","Assert","ConsoleFunction","Error","Log","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","fmt","fmt","from","init","into","ne","serialize","set_span","span","to_owned","to_string","try_from","try_into","type_id","0","0","0","ConsoleStatement","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","fmt","fmt","from","function","init","into","ne","serialize","set_span","span","span","to_owned","to_string","try_from","try_into","type_id","Const","DeclarationType","DefinitionStatement","Let","borrow","borrow_mut","clone","clone_into","declaration_type","declaration_type","deref","deref_mut","deserialize","drop","eq","equivalent","fmt","fmt","from","init","into","ne","serialize","set_span","span","span","to_owned","to_string","try_from","try_into","type_","type_id","value","variable_name","Const","DeclarationType","Let","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","fmt","fmt","from","init","into","serialize","to_owned","to_string","try_from","try_into","type_id","IterationStatement","block","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","fmt","fmt","from","inclusive","init","into","ne","serialize","set_span","span","span","start","start_value","stop","stop_value","to_owned","to_string","try_from","try_into","type_","type_id","variable","ReturnStatement","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","expression","fmt","fmt","from","init","into","ne","serialize","set_span","span","span","to_owned","to_string","try_from","try_into","type_id","Assign","Block","Conditional","Console","Definition","Iteration","Return","Statement","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","dummy","eq","equivalent","fmt","fmt","from","init","into","ne","serialize","set_span","span","to_owned","to_string","try_from","try_into","type_id","0","0","0","0","0","0","0","tuple","type_","0","Tuple","borrow","borrow_mut","clone","clone_into","deref","deref","deref_mut","deserialize","drop","eq","equivalent","fmt","fmt","from","get_hash","hash","init","into","ne","serialize","to_owned","to_string","try_from","try_into","try_new","type_id","Address","Boolean","Err","Field","Group","I128","I16","I32","I64","I8","Identifier","Scalar","String","Tuple","Type","U128","U16","U32","U64","U8","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","eq_flat","equivalent","fmt","fmt","from","from","from","get_hash","hash","init","into","ne","serialize","to_owned","to_string","try_from","try_into","type_id","0","0","Address","Boolean","Circuit","Field","Group","I128","I16","I32","I64","I8","Input","Scalar","String","U128","U16","U32","U64","U8","Value","abs","abs_wrapped","add","add_wrapped","as_ref","bitand","bitor","borrow","borrow_mut","clone","clone_into","deref","deref_mut","div","div_wrapped","drop","eq","eq","equivalent","fmt","fmt","from","from","ge","gt","implement_const_binary","implement_const_unary","init","into","is_supported_const_fold_type","le","lt","mul","mul_wrapped","ne","neg","not","pow","pow_wrapped","shl","shl_wrapped","shr","shr_wrapped","sub","sub_wrapped","to_owned","to_string","try_from","try_into","type_id","xor","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],"q":["leo_ast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_ast::access","","","","","","","","","","","","","","","","","","","","","leo_ast::access::associated_constant_access","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_ast::access::associated_function_access","","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_ast::access::member_access","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_ast::access::tuple_access","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_ast::circuits","","leo_ast::circuits::circuit","","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_ast::circuits::circuit_member","","","","","","","","","","","","","","","","","","","","","","","","","leo_ast::circuits::circuit_member::CircuitMember","","leo_ast::common","","","","","leo_ast::common::global_consts_json","","leo_ast::common::identifier","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_ast::common::imported_modules","","leo_ast::common::positive_number","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_ast::common::static_string","","","","","","","","","","","","","","","","","","","","","","","","","","leo_ast::expressions","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_ast::expressions::AccessExpression","","","","leo_ast::expressions::Expression","","","","","","","","","","leo_ast::expressions::Literal","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_ast::expressions::access","","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_ast::expressions::access::AccessExpression","","","","leo_ast::expressions::binary","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_ast::expressions::call","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_ast::expressions::circuit_init","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_ast::expressions::err","","","","","","","","","","","","","","","","","","","","","","","","","","leo_ast::expressions::literal","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_ast::expressions::literal::Literal","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_ast::expressions::ternary","","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_ast::expressions::tuple_init","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_ast::expressions::unary","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_ast::functions","","leo_ast::functions::function","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_ast::functions::input","","leo_ast::functions::input::function_input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_ast::functions::input::input_variable","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_ast::functions::input::input_variable::FunctionInput","leo_ast::groups","","leo_ast::groups::group_coordinate","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_ast::groups::group_coordinate::GroupCoordinate","","leo_ast::groups::group_literal","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_ast::groups::group_literal::GroupLiteral","","","leo_ast::input","","","","","","leo_ast::input::definition","","","","","","","","","","","","","","","","","","","","","","","","","","leo_ast::input::input_ast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_ast::input::input_value","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_ast::input::input_value::InputValue","","","","","","","","","","","","","","leo_ast::input::program_input","","","","","","","","","","","","","","","","","","","","","leo_ast::input::section","","","","","","","","","","","","","","","","","","","","","","leo_ast::node","","","leo_ast::passes","","leo_ast::passes::reconstructor","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_ast::passes::visitor","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_ast::program","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_ast::statements","","","","","","","","leo_ast::statements::assign","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_ast::statements::block","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_ast::statements::conditional","","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_ast::statements::console","","","leo_ast::statements::console::console_args","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_ast::statements::console::console_function","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_ast::statements::console::console_function::ConsoleFunction","","","leo_ast::statements::console::console_statement","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_ast::statements::definition","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_ast::statements::definition::declaration_type","","","","","","","","","","","","","","","","","","","","","","","","leo_ast::statements::iteration","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_ast::statements::return_statement","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_ast::statements::statement","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_ast::statements::statement::Statement","","","","","","","leo_ast::types","","leo_ast::types::tuple","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_ast::types::type_","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_ast::types::type_::Type","","leo_ast::value","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_ast::value::Value","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The abstract syntax tree (AST) for a Leo program.","A node in the AST.","","","Returns a reference to the inner program AST …","","","","","","","","","","","","","","","","Returns the argument unchanged.","Deserializes the JSON string into a ast from a file.","Deserializes the JSON string into a ast.","","","","","Calls <code>U::from(self)</code>.","","","Creates a new AST from a given program tree.","","Helper function to normalize AST JSON into a form …","This module contains both a Reducer and Visitor design …","A Leo program consists of import, circuit, and function …","Helper function to recursively filter keys from AST JSON","Set the network name to the given string.","Set the program name to the given string.","Sets the span of the node.","","","Returns the span of the node.","","Serializes the ast into a JSON file.","Serializes the ast into a JSON value and removes keys from …","Serializes the ast into a JSON string.","","","","","","","","An access expression to an circuit constant., e.g. <code>u8::MAX</code>.","An access expression to an associated function in a …","A circuit member access expression <code>inner.name</code> to some …","A tuple access expression, e.g., <code>tuple.index</code>.","The arguments passed to the function <code>name</code>.","","","The index to access in the tuple expression. E.g., <code>0</code> for …","The inner circuit that is being accessed.","","The circuit constant that is being accessed.","The static circuit member function that is being accessed.","The name of the circuit member to access.","The span for the entire expression <code>Foo::bar()</code>.","The span for the entire expression <code>Foo::bar()</code>.","The span covering all of <code>inner.name</code>.","The span for the entire expression <code>tuple.index</code>.","An expression evaluating to some tuple type, e.g., <code>(5, 2)</code>.","","The inner circuit type.","The inner circuit type.","An access expression to an circuit constant., e.g. <code>u8::MAX</code>.","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","The circuit constant that is being accessed.","","","","","The span for the entire expression <code>Foo::bar()</code>.","","","","","The inner circuit type.","","An access expression to an associated function in a …","The arguments passed to the function <code>name</code>.","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","The static circuit member function that is being accessed.","","","","","The span for the entire expression <code>Foo::bar()</code>.","","","","","The inner circuit type.","","A circuit member access expression <code>inner.name</code> to some …","","","","","","","","","","","","","Returns the argument unchanged.","","The inner circuit that is being accessed.","Calls <code>U::from(self)</code>.","The name of the circuit member to access.","","","","","The span covering all of <code>inner.name</code>.","","","","","","A tuple access expression, e.g., <code>tuple.index</code>.","","","","","","","","","","","","","Returns the argument unchanged.","The index to access in the tuple expression. E.g., <code>0</code> for …","","Calls <code>U::from(self)</code>.","","","","","The span for the entire expression <code>tuple.index</code>.","","","","","An expression evaluating to some tuple type, e.g., <code>(5, 2)</code>.","","","","A circuit type definition, e.g., …","","","","","","","","","","","","","Returns the argument unchanged.","The name of the type in the type system in this module.","","Calls <code>U::from(self)</code>.","Was this a <code>record Foo { ... }</code>? If so, it wasn’t a …","The fields, constant variables, and functions of this …","Returns the circuit name as a Symbol.","","","","The entire span of the circuit definition.","","","","","","A member of a circuit definition.","A variable definition in a circuit; For example: …","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Returns the name of the circuit member without span.","","","","","","","","The identifier of the constant.","The type the constant has.","","","","","","","","An identifier in a program.","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Check if the Identifier name matches the other name.","The symbol that the user wrote, e.g., <code>foo</code>.","Constructs a new identifier with <code>name</code> and a default span.","","","","A span locating where the identifier occurred in the …","","","","","","","","A number string guaranteed to be positive.","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Returns <code>true</code> if this number is zero.","","","","","Converts the positive number into a <code>usize</code> or panics if it …","","","","The string representation of the positive number.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","Absolute value checking for overflow, i.e. <code>.abs()</code>.","Absolute value wrapping around at the boundary of the …","A circuit access expression, e.g., <code>Foo.bar</code>.","An access expressions, extracting a smaller part out of a …","Addition, i.e. <code>+</code>, <code>.add()</code>.","Wrapping addition, i.e. <code>.add_wrapped()</code>.","An address literal, e.g., …","Logical AND, i.e. <code>&amp;&amp;</code>.","Access to an associated variable of a circuit e.g <code>u8::MAX</code>.","Access to an associated function of a circuit e.g …","A binary expression, e.g., <code>42 + 24</code>.","A binary expression <code>left op right</code> of two operands …","A binary operator.","Bitwise AND, i.e. <code>&amp;</code>, <code>.and()</code>.","Bitwise OR, i.e. <code>|</code>, <code>.or()</code>.","A boolean literal, either <code>true</code> or <code>false</code>.","A call expression, e.g., <code>my_fun(args)</code>.","A function call expression, e.g., <code>foo(args)</code> or …","An expression constructing a circuit like …","A circuit initialization expression, e.g., …","An initializer for a single field / variable of a circuit …","Division, i.e. <code>/</code>, <code>.div()</code>.","Wrapping division, i.e. <code>.div_wrapped()</code>.","Double operation, i.e. <code>.double()</code>.","Equality relation, i.e. <code>==</code>, <code>.eq()</code>.","An expression of type “error”. Will result in a …","Represents a syntactically invalid expression.","Expression that evaluates to a value.","A field literal, e.g., <code>42field</code>. A signed number followed …","A group literal, either product or affine. For example, …","Greater-than relation, i.e. <code>&gt;</code>, <code>.gt()</code>.","Greater-or-equal relation, i.e. <code>&gt;=</code>, <code>.gte()</code>.","A 128-bit signed integer literal, e.g., <code>42i128</code>.","A 16-bit signed integer literal, e.g., <code>42i16</code>.","A 32-bit signed integer literal, e.g., <code>42i32</code>.","A 64-bit signed integer literal, e.g., <code>42i64</code>.","An 8-bit signed integer literal, e.g., <code>42i8</code>.","An identifier.","Multiplicative inverse, i.e. <code>.inv()</code>.","A literal.","A literal expression.","Lesser-than relation, i.e. <code>&lt;</code>, <code>.lt()</code>.","Lesser-or-equal relation, i.e. <code>&lt;=</code>, <code>.lte()</code>.","An expression accessing a field in a structure, e.g., …","Arithmetic modulo, i.e. <code>.mod()</code>","Multiplication, i.e. <code>*</code>, <code>.mul()</code>.","Wrapping multiplication, i.e. <code>.mul_wrapped()</code>.","Boolean NAND, i.e. <code>.nand()</code>.","Negate operation, i.e. <code>.neg()</code>.","In-equality relation, i.e. <code>!=</code>, <code>.neq()</code>.","Boolean NOR, i.e. <code>.nor()</code>.","Bitwise NOT, i.e. <code>!</code>, <code>.not()</code>.","Logical OR, i.e. <code>||</code>.","Exponentiation, i.e. <code>**</code> in <code>a ** b</code>, <code>.pow()</code>.","Wrapping exponentiation, i.e. <code>.pow_wrapped()</code>.","Remainder, i.e. <code>%</code>, <code>.rem()</code>.","Wrapping remainder, i.e. <code>.rem_wrapped()</code>.","A scalar literal, e.g. <code>1scalar</code>. An unsigned number …","Shift left operation, i.e. <code>&lt;&lt;</code>, <code>.shl()</code>.","Wrapping shift left operation, i.e. <code>.shl_wrapped()</code>.","Shift right operation, i.e. &gt;&gt;, <code>.shr()</code>.","Wrapping shift right operation, i.e. <code>.shr_wrapped()</code>.","Square operation, i.e. <code>.square()</code>.","Square root operation, i.e. <code>.sqrt()</code>.","A string literal, e.g., <code>&quot;foobar&quot;</code>.","Subtraction, i.e. <code>-</code>, <code>.sub()</code>.","Wrapped subtraction, i.e. <code>.sub_wrapped()</code>.","A ternary conditional expression <code>cond ? if_expr : else_expr</code>…","A ternary conditional expression, that is, …","Access to a tuple field using its position, e.g., <code>tuple.1</code>.","A tuple expression e.g., <code>(foo, 42, true)</code>.","A tuple construction expression, e.g., <code>(foo, false, 42)</code>.","A 128-bit unsigned integer literal, e.g., <code>42u128</code>.","A 16-bit unsigned integer literal, e.g., <code>42u16</code>.","A 32-bit unsigned integer literal, e.g., <code>42u32</code>.","A 64-bit unsigned integer literal, e.g., <code>42u64</code>.","A 8-bit unsigned integer literal, e.g., <code>42u8</code>.","An unary expression.","An unary expression applying an operator to an inner …","A unary operator for a unary expression.","Bitwise XOR, i.e. <code>.xor()</code>.","","Expressions for the arguments passed to the functions …","","","","","","","","The condition determining which branch to pick.","","","","","The elements of the tuple. In the example above, it would …","","","","The expression to initialize the field with. When <code>None</code>, a …","","","Returns the argument unchanged.","An expression evaluating to a callable function, either a …","The name of the field / variable to be initialized.","The branch the expression evaluates to if <code>condition</code> …","The branch the expression evaluates to if <code>condition</code> …","","Calls <code>U::from(self)</code>.","The left operand of the expression.","","Initializer expressions for each of the fields in the …","The name of the structure type to initialize.","","The operand defining the meaning of the resulting binary …","The unary operator to apply to <code>inner</code>.","The inner expression <code>op</code> is applied to.","The right operand of the expression.","","","","The span from <code>left</code> to <code>right</code>.","Span of the entire call <code>function(arguments)</code>.","A span from <code>name</code> to <code>}</code>.","The span of the invalid expression.","The span from <code>condition</code> to <code>if_false</code>.","The span from <code>(</code> to <code>)</code>.","The span covering <code>op inner</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An access expressions, extracting a smaller part out of a …","Access to an associated variable of a circuit e.g <code>u8::MAX</code>.","Access to an associated function of a circuit e.g …","An expression accessing a field in a structure, e.g., …","Access to a tuple field using its position, e.g., <code>tuple.1</code>.","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Addition, i.e. <code>+</code>, <code>.add()</code>.","Wrapping addition, i.e. <code>.add_wrapped()</code>.","Logical AND, i.e. <code>&amp;&amp;</code>.","A binary expression <code>left op right</code> of two operands …","A binary operator.","Bitwise AND, i.e. <code>&amp;</code>, <code>.and()</code>.","Bitwise OR, i.e. <code>|</code>, <code>.or()</code>.","Division, i.e. <code>/</code>, <code>.div()</code>.","Wrapping division, i.e. <code>.div_wrapped()</code>.","Equality relation, i.e. <code>==</code>, <code>.eq()</code>.","Greater-than relation, i.e. <code>&gt;</code>, <code>.gt()</code>.","Greater-or-equal relation, i.e. <code>&gt;=</code>, <code>.gte()</code>.","Lesser-than relation, i.e. <code>&lt;</code>, <code>.lt()</code>.","Lesser-or-equal relation, i.e. <code>&lt;=</code>, <code>.lte()</code>.","Arithmetic modulo, i.e. <code>.mod()</code>","Multiplication, i.e. <code>*</code>, <code>.mul()</code>.","Wrapping multiplication, i.e. <code>.mul_wrapped()</code>.","Boolean NAND, i.e. <code>.nand()</code>.","In-equality relation, i.e. <code>!=</code>, <code>.neq()</code>.","Boolean NOR, i.e. <code>.nor()</code>.","Logical OR, i.e. <code>||</code>.","Exponentiation, i.e. <code>**</code> in <code>a ** b</code>, <code>.pow()</code>.","Wrapping exponentiation, i.e. <code>.pow_wrapped()</code>.","Remainder, i.e. <code>%</code>, <code>.rem()</code>.","Wrapping remainder, i.e. <code>.rem_wrapped()</code>.","Shift left operation, i.e. <code>&lt;&lt;</code>, <code>.shl()</code>.","Wrapping shift left operation, i.e. <code>.shl_wrapped()</code>.","Shift right operation, i.e. &gt;&gt;, <code>.shr()</code>.","Wrapping shift right operation, i.e. <code>.shr_wrapped()</code>.","Subtraction, i.e. <code>-</code>, <code>.sub()</code>.","Wrapped subtraction, i.e. <code>.sub_wrapped()</code>.","Bitwise XOR, i.e. <code>.xor()</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns a <code>BinaryOperation</code> from the given <code>Symbol</code>. This is …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The left operand of the expression.","","The operand defining the meaning of the resulting binary …","The right operand of the expression.","","","","","The span from <code>left</code> to <code>right</code>.","","","","","","","","","","","A function call expression, e.g., <code>foo(args)</code> or …","Expressions for the arguments passed to the functions …","","","","","","","","","","","","","Returns the argument unchanged.","An expression evaluating to a callable function, either a …","","Calls <code>U::from(self)</code>.","","","","","Span of the entire call <code>function(arguments)</code>.","","","","","","A circuit initialization expression, e.g., …","An initializer for a single field / variable of a circuit …","","","","","Returns true if the record has all required fields and …","","","","","","","","","","","","","","","","","The expression to initialize the field with. When <code>None</code>, a …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","The name of the field / variable to be initialized.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Initializer expressions for each of the fields in the …","The name of the structure type to initialize.","","","","","","","A span from <code>name</code> to <code>}</code>.","","","Returns the circuit as a record interface with visibility.","","","","","","","","","Represents a syntactically invalid expression.","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","The span of the invalid expression.","","","","","","An address literal, e.g., …","A boolean literal, either <code>true</code> or <code>false</code>.","A field literal, e.g., <code>42field</code>. A signed number followed …","A group literal, either product or affine. For example, …","A 128-bit signed integer literal, e.g., <code>42i128</code>.","A 16-bit signed integer literal, e.g., <code>42i16</code>.","A 32-bit signed integer literal, e.g., <code>42i32</code>.","A 64-bit signed integer literal, e.g., <code>42i64</code>.","An 8-bit signed integer literal, e.g., <code>42i8</code>.","A literal.","A scalar literal, e.g. <code>1scalar</code>. An unsigned number …","A string literal, e.g., <code>&quot;foobar&quot;</code>.","A 128-bit unsigned integer literal, e.g., <code>42u128</code>.","A 16-bit unsigned integer literal, e.g., <code>42u16</code>.","A 32-bit unsigned integer literal, e.g., <code>42u32</code>.","A 64-bit unsigned integer literal, e.g., <code>42u64</code>.","A 8-bit unsigned integer literal, e.g., <code>42u8</code>.","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A ternary conditional expression, that is, …","","","","","The condition determining which branch to pick.","","","","","","","","","Returns the argument unchanged.","The branch the expression evaluates to if <code>condition</code> …","The branch the expression evaluates to if <code>condition</code> …","","Calls <code>U::from(self)</code>.","","","","","The span from <code>condition</code> to <code>if_false</code>.","","","","","","A tuple construction expression, e.g., <code>(foo, false, 42)</code>.","","","","","","","","","The elements of the tuple. In the example above, it would …","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","The span from <code>(</code> to <code>)</code>.","","","","","","Absolute value checking for overflow, i.e. <code>.abs()</code>.","Absolute value wrapping around at the boundary of the …","Double operation, i.e. <code>.double()</code>.","Multiplicative inverse, i.e. <code>.inv()</code>.","Negate operation, i.e. <code>.neg()</code>.","Bitwise NOT, i.e. <code>!</code>, <code>.not()</code>.","Square operation, i.e. <code>.square()</code>.","Square root operation, i.e. <code>.sqrt()</code>.","An unary expression applying an operator to an inner …","A unary operator for a unary expression.","Represents the opera.tor as a string.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns a <code>UnaryOperation</code> from the given <code>Symbol</code>.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","The unary operator to apply to <code>inner</code>.","The inner expression <code>op</code> is applied to.","","","","","The span covering <code>op inner</code>.","","","","","","","","","","","","A function definition.","The body of the function.","","","","","Any mapping to the core library. Always <code>None</code> when …","","","","","","","","","Private formatting method used for optimizing fmt::Debug …","Returns the argument unchanged.","The function identifier, e.g., <code>foo</code> in …","","The function’s parameters.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the function name is <code>main</code>.","Returns function name.","The function’s required return type.","","","","The entire span of the function definition.","","","","","","","","","A function parameter.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","The name the parameter is accessible as in the function’…","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","The mode of the function parameter.","","","","","","","The parameters span from any annotations to its type.","","","","","","","","","What’s the parameter’s type?","","","Enumerates the possible inputs to a function.","A normal function parameter.","","","","","","","","","Returns true if <code>self == other</code>. Does not compare spans.","","","","Formats the parameter to <code>f</code>.","Returns the argument unchanged.","Returns Option with FunctionInputVariable if the input is …","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","A coordinate in a affine group literal.","Recovery with an inferred value.","A number, e.g., <code>42</code>.","A sign high recovery, i.e. <code>+</code>.","A sign low recovery, i.e., <code>-</code>.","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","A group literal.","An affine group literal, e.g., <code>(42, 24)group</code>.","Product group literal, e.g., <code>42group</code>.","An affine group literal with (x, y) coordinates.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","The span from <code>(</code> to <code>)</code>.","","","","","","","","","","The left component of the type, e.g., <code>42</code> in the case above.","The right component of the type, e.g., <code>24</code> in the case …","","","","","","","","","","A single definition inside a section in a state or an …","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Input data which includes <code>ProgramInput</code>.","A raw unprocessed input or state file data. Used for …","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns all values of the input AST for execution with …","","","","Serializes the input into a JSON file.","Serializes the <code>Input</code> into a JSON value and removes keys …","Serializes the ast into a JSON string.","Serializes the <code>Input</code> into a JSON Value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","Processed Program input.","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","A single section in an input or a state file. An example …","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","A node in the AST.","Sets the span of the node.","Returns the span of the node.","This module contains a Reconstructor trait for the AST. It …","This module contains Visitor trait implementations for the …","","A Reconstructor trait for expressions in the AST.","A Reconstructor trait for the program represented by the …","A Reconstructor trait for statements in the AST.","","","","","","","","","","","","","","","","","","","","","","","","","A Visitor trait for expressions in the AST.","","A Visitor trait for the program represented by the AST.","A Visitor trait for statements in the AST.","","","","","","","","","","","","","","","","","","","","","","","","Stores the Leo program abstract syntax tree.","","","A map from circuit names to circuit definitions.","","","Constructs an empty program node.","","","","","","","Expected main function inputs. Empty after parsing.","","","Returns the argument unchanged.","A map from function names to function definitions.","A map from import names to import definitions.","","Calls <code>U::from(self)</code>.","The name of the program.","","The network of the program.","","","","","","","","","","","","","","","Adding assignment, <code>+=</code>.","Logical and assignment <code>&amp;&amp;=</code>.","Plain assignment, <code>=</code>.","The assignment operator.","An assignment statement, <code>assignee operation? = value</code>.","Bitwise and assignment <code>&amp;=</code>.","Bitwise or assignment <code>|=</code>.","Bitwise xor assignment <code>^=</code>.","Dividing-assignment, <code>/=</code>.","Multiplying assignment, <code>*=</code>.","Logical or assignment <code>||=</code>.","Exponentiating assignment <code>**=</code>.","Remaindering-assignment, <code>%=</code>.","Shift left assignment <code>&lt;&lt;=</code>.","Shift right assignment <code>&gt;&gt;=</code>.","Subtracting assignment, <code>-=</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","The assignment operation. For plain assignment, use …","The place to assign to.","","","","","The span, excluding the semicolon.","","","","","","","","","","The value to assign to the <code>assignee</code>.","A block <code>{ [stmt]* }</code> consisting of a list of statements to …","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","The span from <code>{</code> to <code>}</code>.","The list of statements to execute.","","","","","","An <code>if condition block (else next)?</code> statement.","","","","","The <code>bool</code>-typed condition deciding what to evaluate.","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","The statement, if any, to evaluate when <code>condition</code> yields …","","","","The span from <code>if</code> to <code>next</code> or to <code>block</code>.","The block to evaluate in case <code>condition</code> yields <code>true</code>.","","","","","","","","","The arguments <code>args</code> passed to <code>console.log(args)</code> or …","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Parameters to interpolate in <code>string</code>.","","","","The span from <code>(</code> to <code>)</code>.","The formatting string with <code>parameters</code> interpolated into it.","","","","","","A <code>console.assert(expr)</code> call to invoke, asserting that the …","A console logging function to invoke.","A <code>console.error(args)</code> call to invoke, resulting in an …","A <code>console.log(args)</code> call to invoke, resulting in a log …","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","A console logging statement like <code>console.log(...);</code>.","","","","","","","","","","","","","Returns the argument unchanged.","The logging function to run.","","Calls <code>U::from(self)</code>.","","","","","The span excluding the semicolon.","","","","","","This is a <code>const</code> binding.","The sort of bindings to introduce, either <code>let</code> or <code>const</code>.","A <code>let</code> or <code>const</code> declaration statement.","This is a <code>let</code> binding.","","","","","","What sort of declaration is this? <code>let</code> or <code>const</code>?.","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","The span excluding the semicolon.","","","","","The types of the bindings, if specified, or inferred …","","An initializer value for the bindings.","The bindings / variable names to declare.","This is a <code>const</code> binding.","The sort of bindings to introduce, either <code>let</code> or <code>const</code>.","This is a <code>let</code> binding.","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","A bounded <code>for</code> loop statement …","The block to run on each iteration.","","","","","","","","","","","","","Returns the argument unchanged.","Whether <code>stop</code> is inclusive or not. Signified with <code>=</code> when …","","Calls <code>U::from(self)</code>.","","","","","The span from <code>for</code> to <code>block</code>.","The start of the iteration.","The concrete value of <code>start</code>.","The end of the iteration, possibly <code>inclusive</code>.","The concrete value of <code>stop</code>.","","","","","The type of the iteration.","","The binding / variable to introduce in the body <code>block</code>.","A return statement <code>return expression;</code>.","","","","","","","","","","","The expression to return to the function caller.","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","The span of <code>return expression</code> excluding the semicolon.","","","","","","An assignment statement.","A block statement.","An <code>if</code> statement.","A console logging statement.","A binding or set of bindings / variables to declare.","A <code>for</code> statement.","A return statement <code>return expr;</code>.","Program statement that defines some action (or expression) …","","","","","","","","","Returns a dummy statement made from an empty block <code>{}</code>.","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","A type list of at least two types.","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","Returns a new <code>Type::Tuple</code> enumeration.","","The <code>address</code> type.","The <code>bool</code> type.","Placeholder for a type that could not be resolved or was …","The <code>field</code> type.","The <code>group</code> type.","The 128-bit signed integer type.","The 16-bit signed integer type.","The 32-bit signed integer type.","The 64-bit signed integer type.","The 8-bit signed integer type.","A reference to a built in type.","The <code>scalar</code> type.","The <code>string</code> type.","A static tuple of at least one type.","Explicit type used for defining a variable or expression …","The 128-bit unsigned integer type.","The 16-bit unsigned integer type.","The 32-bit unsigned integer type.","The 64-bit unsigned integer type.","The 8-bit unsigned integer type.","","","","","","","","","","Returns <code>true</code> if the self <code>Type</code> is equal to the other <code>Type</code>.","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts a literal to a value. This should only be invoked …","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,0,1,1,1,1,0,0,1,0,1,1,1,1,0,0,0,0,0,1,1,2,0,0,2,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,3,0,0,4,5,0,6,3,5,6,3,5,4,4,0,6,3,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,0,0,0,0,0,0,0,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,14,0,15,15,16,15,17,17,14,0,0,15,15,16,14,0,14,0,0,15,15,13,15,14,0,0,16,16,15,15,16,16,16,16,16,14,13,0,14,15,15,17,15,15,15,15,13,15,15,13,15,15,15,15,15,16,15,15,15,15,13,13,16,15,15,14,0,17,14,0,16,16,16,16,16,14,0,0,15,0,18,0,14,14,0,0,14,14,19,14,14,14,14,20,14,14,0,21,14,14,14,18,21,19,19,14,14,22,0,23,23,14,22,24,24,22,14,14,14,22,18,23,25,19,20,24,0,14,14,14,14,0,14,0,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,40,41,42,44,45,46,47,48,49,50,51,52,53,54,55,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,26,27,28,29,15,15,15,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,22,15,22,15,22,15,22,15,22,15,22,15,22,15,22,15,22,15,22,15,15,22,22,15,22,15,15,22,15,22,22,22,22,22,15,22,22,22,22,15,22,15,22,15,22,15,22,15,22,0,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,0,0,21,23,21,23,23,21,23,21,23,21,23,21,23,21,23,21,23,21,23,21,23,21,21,21,23,23,21,23,21,21,23,21,23,23,23,21,23,21,23,23,23,23,21,23,23,21,23,21,23,21,23,21,23,0,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,16,16,16,16,16,16,16,16,16,0,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,40,41,42,44,45,46,47,48,49,50,51,52,53,54,55,0,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,0,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,13,13,13,13,13,13,13,13,0,0,13,13,24,13,24,13,24,13,24,13,24,13,24,13,24,13,24,13,24,13,24,13,24,24,13,24,13,13,24,13,24,24,24,24,13,24,24,24,24,13,24,24,13,24,13,24,13,24,0,0,0,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,0,0,57,0,0,57,57,57,58,57,58,57,58,57,58,57,58,57,58,57,58,57,58,57,58,57,58,57,57,58,58,58,57,58,58,57,58,57,58,58,58,58,58,57,58,58,58,58,57,58,57,58,57,58,57,58,58,57,58,0,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,60,0,0,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,62,0,0,63,63,63,64,63,64,63,64,63,64,63,64,63,64,63,64,63,64,63,64,63,64,63,63,64,63,64,63,64,63,64,63,64,63,64,63,63,64,63,64,63,63,64,63,64,63,64,64,64,65,66,65,0,0,0,0,0,0,0,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,0,0,68,69,68,69,68,69,68,69,68,68,69,68,69,68,69,68,69,68,69,68,69,68,69,68,69,68,69,69,68,69,69,69,68,69,68,69,68,69,68,69,68,69,70,70,70,70,70,70,70,70,70,0,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,0,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,0,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,0,2,2,0,0,87,0,0,0,87,88,87,88,87,89,87,88,88,88,87,87,89,87,89,88,87,89,88,88,87,87,87,90,0,90,0,0,90,91,90,91,90,92,90,91,91,91,90,90,92,90,92,91,90,92,91,91,90,90,90,0,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,0,0,0,0,0,0,0,0,94,94,94,0,0,94,94,94,94,94,94,94,94,94,94,94,94,94,95,94,95,94,95,94,95,94,95,94,95,94,95,94,95,94,95,94,95,94,95,95,94,95,94,95,94,95,94,95,95,95,94,95,95,95,95,94,95,95,94,95,94,95,94,95,95,0,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,0,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,0,0,0,0,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,99,0,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,100,101,102,0,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,104,0,0,104,105,105,105,105,0,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,104,0,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,0,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,0,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,108,108,108,108,108,108,108,0,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,109,110,111,112,113,114,115,0,0,116,0,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,117,117,117,117,117,117,117,117,117,117,117,117,117,117,0,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,118,119,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,0,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,0,0,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,121,122,123,124,125,127,128,129,130,131,132,133,134,135,136,137,138],"f":[null,null,null,[[["",0]],["program",3]],[[["",0]],["program",3]],null,[[["",0]],["",0]],[[["",0]],["",0]],null,[[["",0]],["ast",3]],[[["",0],["",0]]],null,[[],["ast",3]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["",0],["ast",3]],["bool",0]],[[["",0],["",0]],["bool",0]],null,[[["",0],["formatter",3]],["result",6]],[[]],[[["pathbuf",3]],["result",6]],[[["str",0]],["result",6]],null,null,[[],["usize",0]],null,[[]],[[],["program",3]],[[["",0],["ast",3]],["bool",0]],[[["program",3]]],null,[[["value",4]],["value",4]],null,null,[[["value",4],["str",0]],["value",4]],[[["string",3]]],[[["string",3]]],[[["",0],["span",3]]],null,null,[[["",0]],["span",3]],null,[[["",0],["pathbuf",3],["str",0]],["result",6]],[[["",0],["pathbuf",3],["str",0]],["result",6]],[[["",0]],["result",6,[["string",3]]]],[[["",0]],["result",6,[["value",4]]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["associatedconstant",3]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[["usize",0]]],[[["",0],["associatedconstant",3]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[],["usize",0]],[[]],null,[[["",0],["associatedconstant",3]],["bool",0]],[[["",0]],["result",4]],[[["",0],["span",3]]],[[["",0]],["span",3]],null,[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],null,[[["",0]],["typeid",3]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["associatedfunction",3]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[["usize",0]]],[[["",0],["associatedfunction",3]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[],["usize",0]],[[]],null,[[["",0],["associatedfunction",3]],["bool",0]],[[["",0]],["result",4]],[[["",0],["span",3]]],[[["",0]],["span",3]],null,[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],null,[[["",0]],["typeid",3]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["memberaccess",3]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[["usize",0]]],[[["",0],["memberaccess",3]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[],["usize",0]],null,[[]],null,[[["",0],["memberaccess",3]],["bool",0]],[[["",0]],["result",4]],[[["",0],["span",3]]],[[["",0]],["span",3]],null,[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["tupleaccess",3]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[["usize",0]]],[[["",0],["tupleaccess",3]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],null,[[],["usize",0]],[[]],[[["",0],["tupleaccess",3]],["bool",0]],[[["",0]],["result",4]],[[["",0],["span",3]]],[[["",0]],["span",3]],null,[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],null,[[["",0]],["typeid",3]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["circuit",3]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[["usize",0]]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],null,[[],["usize",0]],[[]],null,null,[[["",0]],["symbol",3]],[[["",0]],["result",4]],[[["",0],["span",3]]],[[["",0]],["span",3]],null,[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["circuitmember",4]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[["usize",0]]],[[["",0],["circuitmember",4]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[],["usize",0]],[[]],[[["",0]],["symbol",3]],[[["",0],["circuitmember",4]],["bool",0]],[[["",0]],["result",4]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,[[["deserializer",8]],["result",4,[["indexmap",3,[["vec",3,[["identifier",3]]],["definitionstatement",3]]]]]],[[["indexmap",3],["serializer",8]],["result",4]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["identifier",3]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["deserializer",8]],["result",6]],[[["usize",0]]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]]],[[],["usize",0]],[[]],[[["",0],["",0]],["bool",0]],null,[[["symbol",3]]],[[["",0],["serializer",8]],["result",6]],[[["",0],["span",3]]],[[["",0]],["span",3]],null,[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["deserializer",8]],["result",4,[["indexmap",3,[["vec",3,[["symbol",3]]],["program",3]]]]]],[[["indexmap",3],["serializer",8]],["result",4]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["positivenumber",3]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[["usize",0]]],[[["",0],["positivenumber",3]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]]],[[],["usize",0]],[[]],[[["",0]],["bool",0]],[[["",0],["positivenumber",3]],["bool",0]],[[["",0]],["result",4]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["usize",0]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["staticstring",3]],[[["",0],["",0]]],[[],["staticstring",3]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[["usize",0]]],[[["",0],["staticstring",3]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[],["usize",0]],[[]],[[["",0],["staticstring",3]],["bool",0]],[[["string",3]]],[[["",0]],["result",4]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],null,null,[[["",0]],["expression",4]],[[["",0],["",0]]],null,[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[["usize",0]]],null,[[["",0],["expression",4]],["bool",0]],[[["",0],["",0]],["bool",0]],null,null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],null,null,null,null,[[],["usize",0]],[[]],null,null,null,null,[[["",0],["expression",4]],["bool",0]],null,null,null,null,[[["",0]],["result",4]],[[["",0],["span",3]]],[[["",0]],["span",3]],null,null,null,null,null,null,null,null,[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],null,[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["accessexpression",4]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[["usize",0]]],[[["",0],["accessexpression",4]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[],["usize",0]],[[]],[[["",0],["accessexpression",4]],["bool",0]],[[["",0]],["result",4]],[[["",0],["span",3]]],[[["",0]],["span",3]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["binaryoperation",4]],[[["",0]],["binaryexpression",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[],["result",4]],[[["usize",0]]],[[["usize",0]]],[[["",0],["binaryoperation",4]],["bool",0]],[[["",0],["binaryexpression",3]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["symbol",3]],["option",4]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],null,[[["",0],["binaryexpression",3]],["bool",0]],null,null,[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0],["span",3]]],[[["",0]],["span",3]],null,[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["callexpression",3]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[["usize",0]]],[[["",0],["callexpression",3]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],null,[[],["usize",0]],[[]],[[["",0],["callexpression",3]],["bool",0]],[[["",0]],["result",4]],[[["",0],["span",3]]],[[["",0]],["span",3]],null,[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["bool",0]],[[["",0]],["circuitvariableinitializer",3]],[[["",0]],["circuitexpression",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[],["result",4]],[[["usize",0]]],[[["usize",0]]],[[["",0],["circuitvariableinitializer",3]],["bool",0]],[[["",0],["circuitexpression",3]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],null,[[],["usize",0]],[[],["usize",0]],[[]],[[]],null,null,[[["",0],["circuitvariableinitializer",3]],["bool",0]],[[["",0],["circuitexpression",3]],["bool",0]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0],["span",3]]],[[["",0]],["span",3]],null,[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["errexpression",3]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[["usize",0]]],[[["",0],["errexpression",3]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[],["usize",0]],[[]],[[["",0],["errexpression",3]],["bool",0]],[[["",0]],["result",4]],[[["",0],["span",3]]],[[["",0]],["span",3]],null,[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["literal",4]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[["usize",0]]],[[["",0],["literal",4]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[["value",4]]],[[],["usize",0]],[[]],[[["",0],["literal",4]],["bool",0]],[[["",0]],["result",4]],[[["",0],["span",3]]],[[["",0]],["span",3]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["ternaryexpression",3]],[[["",0],["",0]]],null,[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[["usize",0]]],[[["",0],["ternaryexpression",3]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],null,null,[[],["usize",0]],[[]],[[["",0],["ternaryexpression",3]],["bool",0]],[[["",0]],["result",4]],[[["",0],["span",3]]],[[["",0]],["span",3]],null,[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["tupleexpression",3]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[["usize",0]]],null,[[["",0],["tupleexpression",3]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[],["usize",0]],[[]],[[["",0],["tupleexpression",3]],["bool",0]],[[["",0]],["result",4]],[[["",0],["span",3]]],[[["",0]],["span",3]],null,[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,[[],["str",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["unaryoperation",4]],[[["",0]],["unaryexpression",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[],["result",4]],[[["usize",0]]],[[["usize",0]]],[[["",0],["unaryoperation",4]],["bool",0]],[[["",0],["unaryexpression",3]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["symbol",3]],["option",4]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[["",0],["unaryexpression",3]],["bool",0]],null,null,[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0],["span",3]]],[[["",0]],["span",3]],null,[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["function",3]],[[["",0],["",0]]],null,[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[["usize",0]]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],null,[[],["usize",0]],null,[[]],[[["",0]],["bool",0]],[[["",0]],["symbol",3]],null,[[["",0]],["result",4]],[[["",0],["span",3]]],[[["",0]],["span",3]],null,[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["parammode",4]],[[["",0]],["functioninputvariable",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[],["result",4]],[[["usize",0]]],[[["usize",0]]],[[["",0],["parammode",4]],["bool",0]],[[["",0],["functioninputvariable",3]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],null,[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[["",0]],["parammode",4]],null,[[["",0],["functioninputvariable",3]],["bool",0]],[[["identifier",3],["parammode",4],["type",4],["span",3]]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0],["span",3]]],[[["",0]],["span",3]],null,[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["functioninput",4]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[["usize",0]]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[["",0]],["functioninputvariable",3]],[[],["usize",0]],[[]],[[["",0]],["result",4]],[[["",0],["span",3]]],[[["",0]],["span",3]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["groupcoordinate",4]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[["usize",0]]],[[["",0],["groupcoordinate",4]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[],["usize",0]],[[]],[[["",0],["groupcoordinate",4]],["bool",0]],[[["",0]],["result",4]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["groupliteral",4]],[[["",0]],["grouptuple",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[],["result",4]],[[["usize",0]]],[[["usize",0]]],[[["",0],["groupliteral",4]],["bool",0]],[[["",0],["grouptuple",3]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[["",0],["groupliteral",4]],["bool",0]],[[["",0],["grouptuple",3]],["bool",0]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0],["span",3]]],[[["",0]],["span",3]],null,[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["definition",3]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[["usize",0]]],[[["",0],["definition",3]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[],["usize",0]],[[]],null,null,[[["",0],["definition",3]],["bool",0]],[[["",0]],["result",4]],null,[[["",0]]],[[],["result",4]],[[],["result",4]],null,[[["",0]],["typeid",3]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["input",3]],[[["",0]],["inputast",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["input",3]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[],["result",4]],[[["usize",0]]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],null,[[["",0],["str",0],["indexmap",3,[["symbol",3],["circuit",3]]]],["vec",3,[["string",3]]]],null,[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0],["pathbuf",3],["str",0]],["result",6]],[[["",0],["pathbuf",3],["str",0]],["result",6]],[[["",0]],["result",6,[["string",3]]]],[[["",0]],["result",6,[["value",4]]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["inputvalue",4]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[["usize",0]]],[[["",0],["inputvalue",4]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[],["usize",0]],[[]],[[["",0],["inputvalue",4]],["bool",0]],[[["",0]],["result",4]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",6]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["programinput",3]],[[["",0],["",0]]],[[],["programinput",3]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[]],[[],["usize",0]],[[]],null,[[["",0]],["result",4]],[[["",0]]],[[],["result",4]],[[["inputast",3]],["result",6]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["section",3]],[[["",0],["",0]]],null,[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[]],[[],["usize",0]],[[]],[[["",0]],["string",3]],null,[[["",0]],["result",4]],null,[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[["",0],["span",3]]],[[["",0]],["span",3]],null,null,null,null,null,null,[[["",0],["accessexpression",4]]],[[["",0],["assignstatement",3]],["statement",4]],[[["",0],["binaryexpression",3]]],[[["",0],["block",3]],["block",3]],[[["",0],["callexpression",3]]],[[["",0],["circuit",3]],["circuit",3]],[[["",0],["circuitexpression",3]]],[[["",0],["conditionalstatement",3]],["statement",4]],[[["",0],["consolestatement",3]],["statement",4]],[[["",0],["definitionstatement",3]],["statement",4]],[[["",0],["errexpression",3]]],[[["",0],["expression",4]]],[[["",0],["function",3]],["function",3]],[[["",0],["identifier",3]]],[[["",0],["program",3]],["program",3]],[[["",0],["iterationstatement",3]],["statement",4]],[[["",0],["literal",4]]],[[["",0],["program",3]],["program",3]],[[["",0],["returnstatement",3]],["statement",4]],[[["",0],["statement",4]],["statement",4]],[[["",0],["ternaryexpression",3]]],[[["",0],["tupleexpression",3]]],[[["",0],["unaryexpression",3]]],null,null,null,null,null,[[["",0],["accessexpression",4]]],[[["",0],["assignstatement",3]]],[[["",0],["binaryexpression",3]]],[[["",0],["block",3]]],[[["",0],["callexpression",3]]],[[["",0],["circuit",3]]],[[["",0],["circuitexpression",3]]],[[["",0],["conditionalstatement",3]]],[[["",0],["consolestatement",3]]],[[["",0],["definitionstatement",3]]],[[["",0],["errexpression",3]]],[[["",0],["expression",4]]],[[["",0],["function",3]]],[[["",0],["identifier",3]]],[[["",0],["program",3]]],[[["",0],["iterationstatement",3]]],[[["",0],["literal",4]]],[[["",0],["program",3]]],[[["",0],["returnstatement",3]]],[[["",0],["statement",4]]],[[["",0],["ternaryexpression",3]]],[[["",0],["tupleexpression",3]]],[[["",0],["unaryexpression",3]]],null,[[["",0]],["",0]],[[["",0]],["",0]],null,[[["",0]],["program",3]],[[["",0],["",0]]],[[]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[["usize",0]]],[[["",0],["program",3]],["bool",0]],[[["",0],["",0]],["bool",0]],null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],null,null,[[],["usize",0]],[[]],null,[[["",0],["program",3]],["bool",0]],null,[[["",0]],["result",4]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["str",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["assignoperation",4]],[[["",0]],["assignstatement",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[],["result",4]],[[["usize",0]]],[[["usize",0]]],[[["",0],["assignoperation",4]],["bool",0]],[[["",0],["assignstatement",3]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[["assignoperation",4]],["option",4,[["binaryoperation",4]]]],[[["",0],["assignstatement",3]],["bool",0]],null,null,[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0],["span",3]]],[[["",0]],["span",3]],null,[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["block",3]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[["usize",0]]],[[["",0],["block",3]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[],["usize",0]],[[]],[[["",0],["block",3]],["bool",0]],[[["",0]],["result",4]],[[["",0],["span",3]]],[[["",0]],["span",3]],null,null,[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["conditionalstatement",3]],[[["",0],["",0]]],null,[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[["usize",0]]],[[["",0],["conditionalstatement",3]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[],["usize",0]],[[]],[[["",0],["conditionalstatement",3]],["bool",0]],null,[[["",0]],["result",4]],[[["",0],["span",3]]],[[["",0]],["span",3]],null,null,[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["consoleargs",3]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[["usize",0]]],[[["",0],["consoleargs",3]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[],["usize",0]],[[]],[[["",0],["consoleargs",3]],["bool",0]],null,[[["",0]],["result",4]],[[["",0],["span",3]]],[[["",0]],["span",3]],null,null,[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["consolefunction",4]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[["usize",0]]],[[["",0],["consolefunction",4]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[],["usize",0]],[[]],[[["",0],["consolefunction",4]],["bool",0]],[[["",0]],["result",4]],[[["",0],["span",3]]],[[["",0]],["span",3]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["consolestatement",3]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[["usize",0]]],[[["",0],["consolestatement",3]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],null,[[],["usize",0]],[[]],[[["",0],["consolestatement",3]],["bool",0]],[[["",0]],["result",4]],[[["",0],["span",3]]],[[["",0]],["span",3]],null,[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["definitionstatement",3]],[[["",0],["",0]]],null,null,[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[["usize",0]]],[[["",0],["definitionstatement",3]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[],["usize",0]],[[]],[[["",0],["definitionstatement",3]],["bool",0]],[[["",0]],["result",4]],[[["",0],["span",3]]],[[["",0]],["span",3]],null,[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],null,[[["",0]],["typeid",3]],null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["declarationtype",4]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[["usize",0]]],[[["",0],["declarationtype",4]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[],["usize",0]],[[]],[[["",0]],["result",4]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["iterationstatement",3]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[["usize",0]]],[[["",0],["iterationstatement",3]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],null,[[],["usize",0]],[[]],[[["",0],["iterationstatement",3]],["bool",0]],[[["",0]],["result",4]],[[["",0],["span",3]]],[[["",0]],["span",3]],null,null,null,null,null,[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],null,[[["",0]],["typeid",3]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["returnstatement",3]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[["usize",0]]],[[["",0],["returnstatement",3]],["bool",0]],[[["",0],["",0]],["bool",0]],null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[],["usize",0]],[[]],[[["",0],["returnstatement",3]],["bool",0]],[[["",0]],["result",4]],[[["",0],["span",3]]],[[["",0]],["span",3]],null,[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["statement",4]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[["usize",0]]],[[["span",3]]],[[["",0],["statement",4]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[],["usize",0]],[[]],[[["",0],["statement",4]],["bool",0]],[[["",0]],["result",4]],[[["",0],["span",3]]],[[["",0]],["span",3]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["tuple",3]],[[["",0],["",0]]],[[["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[["usize",0]]],[[["",0],["tuple",3]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]]],[[],["usize",0]],[[]],[[["",0],["tuple",3]],["bool",0]],[[["",0]],["result",4]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["vec",3,[["type",4]]],["span",3]],["result",6,[["type",4]]]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["type",4]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[["usize",0]]],[[["",0],["type",4]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["value",4]]],[[["value",4]]],[[]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]]],[[],["usize",0]],[[]],[[["",0],["type",4]],["bool",0]],[[["",0]],["result",4]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["span",3]],["result",6]],[[["span",3]],["result",6]],[[["span",3]],["result",6]],[[["span",3]],["result",6]],[[["",0]],["",0]],[[["span",3]],["result",6]],[[["span",3]],["result",6]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["value",4]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["span",3]],["result",6]],[[["span",3]],["result",6]],[[["usize",0]]],[[["",0],["value",4]],["bool",0]],[[["span",3]],["result",6]],[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["literal",4]]],[[]],[[["span",3]],["result",6]],[[["span",3]],["result",6]],null,null,[[],["usize",0]],[[]],[[["",0]],["bool",0]],[[["span",3]],["result",6]],[[["span",3]],["result",6]],[[["span",3]],["result",6]],[[["span",3]],["result",6]],[[["",0],["value",4]],["bool",0]],[[["span",3]],["result",6]],[[["span",3]],["result",6]],[[["span",3]],["result",6]],[[["span",3]],["result",6]],[[["span",3]],["result",6]],[[["span",3]],["result",6]],[[["span",3]],["result",6]],[[["span",3]],["result",6]],[[["span",3]],["result",6]],[[["span",3]],["result",6]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["span",3]],["result",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"p":[[3,"Ast"],[8,"Node"],[3,"AssociatedFunction"],[3,"TupleAccess"],[3,"MemberAccess"],[3,"AssociatedConstant"],[3,"Circuit"],[4,"CircuitMember"],[13,"CircuitVariable"],[3,"Identifier"],[3,"PositiveNumber"],[3,"StaticString"],[4,"UnaryOperation"],[4,"Expression"],[4,"BinaryOperation"],[4,"Literal"],[4,"AccessExpression"],[3,"CallExpression"],[3,"TernaryExpression"],[3,"TupleExpression"],[3,"CircuitVariableInitializer"],[3,"BinaryExpression"],[3,"CircuitExpression"],[3,"UnaryExpression"],[3,"ErrExpression"],[13,"AssociatedConstant"],[13,"AssociatedFunction"],[13,"Member"],[13,"Tuple"],[13,"Access"],[13,"Binary"],[13,"Call"],[13,"Circuit"],[13,"Err"],[13,"Identifier"],[13,"Literal"],[13,"Ternary"],[13,"Tuple"],[13,"Unary"],[13,"Address"],[13,"Boolean"],[13,"Field"],[13,"Group"],[13,"Scalar"],[13,"String"],[13,"I8"],[13,"I16"],[13,"I32"],[13,"I64"],[13,"I128"],[13,"U8"],[13,"U16"],[13,"U32"],[13,"U64"],[13,"U128"],[3,"Function"],[4,"ParamMode"],[3,"FunctionInputVariable"],[4,"FunctionInput"],[13,"Variable"],[4,"GroupCoordinate"],[13,"Number"],[4,"GroupLiteral"],[3,"GroupTuple"],[13,"Single"],[13,"Tuple"],[3,"Definition"],[3,"Input"],[3,"InputAst"],[4,"InputValue"],[13,"Address"],[13,"Boolean"],[13,"Field"],[13,"Group"],[13,"I8"],[13,"I16"],[13,"I32"],[13,"I64"],[13,"I128"],[13,"U8"],[13,"U16"],[13,"U32"],[13,"U64"],[13,"U128"],[3,"ProgramInput"],[3,"Section"],[8,"ExpressionReconstructor"],[8,"StatementReconstructor"],[8,"ProgramReconstructor"],[8,"ExpressionVisitor"],[8,"StatementVisitor"],[8,"ProgramVisitor"],[3,"Program"],[4,"AssignOperation"],[3,"AssignStatement"],[3,"Block"],[3,"ConditionalStatement"],[3,"ConsoleArgs"],[4,"ConsoleFunction"],[13,"Assert"],[13,"Error"],[13,"Log"],[3,"ConsoleStatement"],[4,"DeclarationType"],[3,"DefinitionStatement"],[3,"IterationStatement"],[3,"ReturnStatement"],[4,"Statement"],[13,"Return"],[13,"Definition"],[13,"Assign"],[13,"Conditional"],[13,"Iteration"],[13,"Console"],[13,"Block"],[3,"Tuple"],[4,"Type"],[13,"Identifier"],[13,"Tuple"],[4,"Value"],[13,"Input"],[13,"Address"],[13,"Boolean"],[13,"Circuit"],[13,"Field"],[13,"Group"],[13,"I8"],[13,"I16"],[13,"I32"],[13,"I64"],[13,"I128"],[13,"U8"],[13,"U16"],[13,"U32"],[13,"U64"],[13,"U128"],[13,"Scalar"],[13,"String"]]},\
"leo_compiler":{"doc":"leo-compiler","t":[3,3,3,3,3,11,11,12,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,0,12,12,12,11,12,11,12,12,12,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,3,3,3,3,12,12,11,11,11,12,11,11,11,11,11,11,11,11,11,12,12,11,12,11,11,12,12,11,12,12,12,11,11,11,12,12,12,12,11,11,11,11,11,11,11,12,11,11,3,11,11,11,11,11,11,11,11,11,11,12,12,11,12,12,11,11,11,11,12,11],"n":["Ast","Compiler","InputAst","OutputOptions","SymbolTable","as_ref","as_repr","ast","ast","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","check_shadowing","circuits","clone","clone","clone","clone_into","clone_into","clone_into","compiler","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","drop","eq","equivalent","fmt","fmt","fmt","from","from","from","from_json_file","from_json_string","functions","handler","init","init","init","initial_ast","initial_input_ast","input_ast","insert_block","insert_circuit","insert_fn","insert_variable","into","into","into","into_repr","lookup_circuit","lookup_fn_scope","lookup_fn_symbol","lookup_scope_by_index","lookup_variable","lookup_variable_mut","main_file_path","ne","network","new","options","output_directory","output_options","parent","program_inputs","program_name","scope_index","scope_index","scopes","sections","serialize","set_network","set_program_name","spans_enabled","ssa_ast","to_json_file","to_json_file","to_json_file_without_keys","to_json_file_without_keys","to_json_string","to_json_value","to_json_value","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unrolled_ast","variable_in_local_scope","variable_in_parent_scope","variables","vzip","vzip","vzip","Ast","Compiler","InputAst","SymbolTable","ast","ast","borrow","borrow_mut","checksum","circuits","clone","clone_into","compile","compile_and_generate_instructions","compiler_stages","deref","deref_mut","drop","from","functions","handler","init","input_ast","into","loop_unrolling_pass","main_file_path","network","new","output_directory","output_options","parent","parse_input","parse_program","parse_program_from_string","program_name","scope_index","scopes","sections","static_single_assignment_pass","symbol_table_pass","to_owned","try_from","try_into","type_checker_pass","type_id","variables","vzip","write_ast_to_json","OutputOptions","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","drop","from","init","initial_ast","initial_input_ast","into","spans_enabled","ssa_ast","to_owned","try_from","try_into","type_id","unrolled_ast","vzip"],"q":["leo_compiler","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_compiler::compiler","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_compiler::options","","","","","","","","","","","","","","","","","","","","",""],"d":["The abstract syntax tree (AST) for a Leo program.","The primary entry point of the Leo compiler.","A raw unprocessed input or state file data. Used for …","","","","Returns a reference to the inner program AST …","The AST for the program.","","","","","","","","Recursively checks if the symbol table contains an entry …","Maps circuit names to circuit definitions. This field is …","","","","","","","The compiler for Leo programs.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Deserializes the JSON string into a ast from a file.","Deserializes the JSON string into a ast.","Functions represents the name of each function mapped to …","The handler is used for error and warning emissions.","","","","If enabled writes the AST after parsing.","If enabled writes the input AST after parsing.","The input ast for the program if it exists.","Creates a new scope for the block and stores it in the …","Inserts a circuit into the symbol table.","Inserts a function into the symbol table.","Inserts a variable into the symbol table.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Attempts to lookup a circuit in the symbol table.","Returns the scope associated with the function symbol, if …","Attempts to lookup a function in the symbol table.","Returns the scope associated with <code>index</code>, if it exists in …","Attempts to lookup a variable in the symbol table.","Returns a mutable reference to the <code>VariableSymbol</code> if it …","The path to the main leo file.","","The network name,","Creates a new AST from a given program tree.","","The path to where the compiler outputs all generated files.","Compiler options on some optional output files.","The parent scope if it exists. For example, the parent …","Returns all values of the input AST for execution with …","The program name,","Returns the current scope index. Increments the scope …","The index of the current scope.","The sub-scopes of this scope.","","","Set the network name to the given string.","Set the program name to the given string.","Whether spans are enabled in the output ASTs.","If enabled writes the AST after static single assignment.","Serializes the input into a JSON file.","Serializes the ast into a JSON file.","Serializes the <code>Input</code> into a JSON value and removes keys …","Serializes the ast into a JSON value and removes keys from …","Serializes the ast into a JSON string.","Serializes the <code>Input</code> into a JSON Value.","","","","","","","","","","","","","","If enabled writes the AST after loop unrolling.","Returns true if the variable exists in the local scope","Returns true if the variable exists in any parent scope","The variables defined in a scope. This field is populated …","","","","The abstract syntax tree (AST) for a Leo program.","The primary entry point of the Leo compiler.","A raw unprocessed input or state file data. Used for …","","The AST for the program.","","","","Returns a SHA256 checksum of the program file.","Maps circuit names to circuit definitions. This field is …","","","Returns a compiled Leo program.","Returns a compiled Leo program and prints the resulting …","Runs the compiler stages.","","","","Returns the argument unchanged.","Functions represents the name of each function mapped to …","The handler is used for error and warning emissions.","","The input ast for the program if it exists.","Calls <code>U::from(self)</code>.","Runs the loop unrolling pass.","The path to the main leo file.","The network name,","Returns a new Leo compiler.","The path to where the compiler outputs all generated files.","Compiler options on some optional output files.","The parent scope if it exists. For example, the parent …","Parses and stores the input file, constructs a syntax …","Parses and stores the main program file, constructs a …","Parses and stores a program file content from a string, …","The program name,","The index of the current scope.","The sub-scopes of this scope.","","Runs the static single assignment pass.","Runs the symbol table pass.","","","","Runs the type checker pass.","","The variables defined in a scope. This field is populated …","","Writes the AST to a JSON file.","","","","","","","","","","Returns the argument unchanged.","","If enabled writes the AST after parsing.","If enabled writes the input AST after parsing.","Calls <code>U::from(self)</code>.","Whether spans are enabled in the output ASTs.","If enabled writes the AST after static single assignment.","","","","","If enabled writes the AST after loop unrolling.",""],"i":[0,0,0,0,0,1,1,2,1,3,4,1,3,4,1,3,3,3,4,1,3,4,1,0,3,1,3,4,1,3,4,1,4,3,4,1,1,1,3,4,1,3,4,1,1,1,3,2,3,4,1,5,5,2,3,3,3,3,3,4,1,1,3,3,3,3,3,3,2,1,2,1,0,2,2,3,4,2,3,3,3,4,4,1,1,5,5,4,1,4,1,1,4,1,3,4,1,3,4,1,3,4,1,3,4,1,5,3,3,3,3,4,1,0,0,0,0,2,1,2,2,2,3,2,2,2,2,2,2,2,2,2,3,2,2,2,2,2,2,2,2,2,2,3,2,2,2,2,3,3,4,2,2,2,2,2,2,2,3,2,2,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],"f":[null,null,null,null,null,[[["",0]],["program",3]],[[["",0]],["program",3]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["symbol",3],["span",3]],["result",4,[["leoerror",4]]]],null,[[["",0]],["symboltable",3]],[[["",0]],["inputast",3]],[[["",0]],["ast",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],null,[[],["symboltable",3]],[[],["ast",3]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4,[["inputast",3]]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["",0],["ast",3]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[]],[[]],[[]],[[["pathbuf",3]],["result",4,[["ast",3],["leoerror",4]]]],[[["str",0]],["result",4,[["ast",3],["leoerror",4]]]],null,null,[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],null,null,null,[[["",0]],["usize",0]],[[["",0],["symbol",3],["circuit",3]],["result",4,[["leoerror",4]]]],[[["",0],["symbol",3],["function",3]],["result",4,[["leoerror",4]]]],[[["",0],["symbol",3],["variablesymbol",3]],["result",4,[["leoerror",4]]]],[[]],[[]],[[]],[[],["program",3]],[[["",0],["symbol",3]],["option",4,[["circuit",3]]]],[[["",0],["symbol",3]],["option",4,[["refcell",3]]]],[[["",0],["symbol",3]],["option",4,[["functionsymbol",3]]]],[[["",0],["usize",0]],["option",4,[["refcell",3]]]],[[["",0],["symbol",3]],["option",4,[["variablesymbol",3]]]],[[["",0],["symbol",3]],["option",4,[["variablesymbol",3]]]],null,[[["",0],["ast",3]],["bool",0]],null,[[["program",3]],["ast",3]],null,null,null,null,[[["",0],["str",0],["indexmap",3,[["symbol",3],["circuit",3],["randomstate",3]]]],["vec",3,[["string",3],["global",3]]]],null,[[["",0]],["usize",0]],null,null,null,[[["",0]],["result",4]],[[["string",3]],["ast",3]],[[["string",3]],["ast",3]],null,null,[[["",0],["pathbuf",3],["str",0]],["result",4,[["leoerror",4]]]],[[["",0],["pathbuf",3],["str",0]],["result",4,[["leoerror",4]]]],[[["",0],["pathbuf",3],["str",0]],["result",4,[["leoerror",4]]]],[[["",0],["pathbuf",3],["str",0]],["result",4,[["leoerror",4]]]],[[["",0]],["result",4,[["string",3],["leoerror",4]]]],[[["",0]],["result",4,[["value",4],["leoerror",4]]]],[[["",0]],["result",4,[["value",4],["leoerror",4]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,[[["",0],["symbol",3]],["bool",0]],[[["",0],["symbol",3]],["bool",0]],null,[[]],[[]],[[]],null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["result",6,[["string",3]]]],null,[[["",0]],["compiler",3]],[[["",0],["",0]]],[[["",0]],["result",6,[["symboltable",3]]]],[[["",0]],["result",6]],[[["",0]],["result",6,[["symboltable",3]]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[]],null,null,[[],["usize",0]],null,[[]],[[["",0],["symboltable",3]],["result",6,[["symboltable",3]]]],null,null,[[["string",3],["string",3],["handler",3],["pathbuf",3],["pathbuf",3],["option",4,[["outputoptions",3]]]]],null,null,null,[[["",0],["pathbuf",3]],["result",6]],[[["",0]],["result",6]],[[["",0],["str",0],["filename",4]],["result",6]],null,null,null,null,[[["",0]],["result",6]],[[["",0]],["result",6,[["symboltable",3]]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0],["symboltable",3]],["result",6,[["symboltable",3]]]],[[["",0]],["typeid",3]],null,[[]],[[["",0],["str",0]],["result",6]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["outputoptions",3]],[[["",0],["",0]]],[[],["outputoptions",3]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[]],[[],["usize",0]],null,null,[[]],null,null,[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[]]],"p":[[3,"Ast"],[3,"Compiler"],[3,"SymbolTable"],[3,"InputAst"],[3,"OutputOptions"]]},\
"leo_core":{"doc":"leo-core","t":[3,13,3,13,3,13,3,13,3,13,3,13,3,13,3,13,4,3,13,3,13,3,13,3,13,3,13,0,17,13,13,13,13,13,13,13,13,17,17,8,4,18,13,13,13,13,13,0,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,0,0,10,11,11,11,11,11,11,11,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["BHP1024Commit","BHP1024Commit","BHP1024Hash","BHP1024Hash","BHP256Commit","BHP256Commit","BHP256Hash","BHP256Hash","BHP512Commit","BHP512Commit","BHP512Hash","BHP512Hash","BHP768Commit","BHP768Commit","BHP768Hash","BHP768Hash","CoreInstruction","Pedersen128Hash","Pedersen128Hash","Pedersen64Hash","Pedersen64Hash","Poseidon2Hash","Poseidon2Hash","Poseidon4Hash","Poseidon4Hash","Poseidon8Hash","Poseidon8Hash","algorithms","ALL_TYPES","BHP1024Commit","BHP1024Hash","BHP256Commit","BHP256Hash","BHP512Commit","BHP512Hash","BHP768Commit","BHP768Hash","BOOL_INT64_STRING_TYPES","BOOL_INT_STRING_TYPES","CoreFunction","CoreInstruction","NUM_ARGS","Pedersen128Hash","Pedersen64Hash","Poseidon2Hash","Poseidon4Hash","Poseidon8Hash","bhp","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","eq","equivalent","first_arg_types","first_arg_types","from","from_symbols","init","into","num_args","pedersen","poseidon","return_type","return_type","second_arg_types","second_arg_types","to_owned","try_from","try_into","type_id","BHP1024Commit","BHP1024Hash","BHP256Commit","BHP256Hash","BHP512Commit","BHP512Hash","BHP768Commit","BHP768Hash","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","first_arg_types","first_arg_types","first_arg_types","first_arg_types","first_arg_types","first_arg_types","first_arg_types","first_arg_types","from","from","from","from","from","from","from","from","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","return_type","return_type","return_type","return_type","return_type","return_type","return_type","return_type","second_arg_types","second_arg_types","second_arg_types","second_arg_types","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Pedersen128Hash","Pedersen64Hash","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","first_arg_types","first_arg_types","from","from","init","init","into","into","return_type","return_type","try_from","try_from","try_into","try_into","type_id","type_id","Poseidon2Hash","Poseidon4Hash","Poseidon8Hash","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","first_arg_types","first_arg_types","first_arg_types","from","from","from","init","init","init","into","into","into","return_type","return_type","return_type","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["leo_core","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_core::algorithms","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_core::algorithms::bhp","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_core::algorithms::pedersen","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_core::algorithms::poseidon","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","A core instruction that maps directly to an AVM bytecode …","","","","","","","","","","","","","","","","","","","","","","","A core function of a core circuit, e.g. <code>hash</code> or <code>commit</code> …","A core instruction that maps directly to an AVM bytecode …","","","","","","","","","","","","","","","","","Returns first argument allowed types.","The allowed types for the first argument of the …","Returns the argument unchanged.","Returns a <code>CoreInstruction</code> from the given circuit and …","","Calls <code>U::from(self)</code>.","Returns the number of arguments required by the …","","","The return type of the core function.","The type of the instruction output.","Returns the second argument allowed types. Implementing …","The allowed types for the second argument of the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","",""],"i":[0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,1,0,1,0,1,0,1,0,1,0,0,1,1,1,1,1,1,1,1,0,0,0,0,2,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,0,0,2,1,2,1,1,1,1,1,0,0,0,0,0,0,0,0,3,4,5,6,7,8,9,10,3,4,5,6,7,8,9,10,3,4,5,6,7,8,9,10,3,4,5,6,7,8,9,10,3,4,5,6,7,8,9,10,3,4,5,6,7,8,9,10,3,4,5,6,7,8,9,10,3,4,5,6,7,8,9,10,3,4,5,6,7,8,9,10,3,4,5,6,7,8,9,10,4,6,8,10,3,4,5,6,7,8,9,10,3,4,5,6,7,8,9,10,3,4,5,6,7,8,9,10,0,0,11,12,11,12,11,12,11,12,11,12,11,12,11,12,11,12,11,12,11,12,11,12,11,12,11,12,0,0,0,13,14,15,13,14,15,13,14,15,13,14,15,13,14,15,13,14,15,13,14,15,13,14,15,13,14,15,13,14,15,13,14,15,13,14,15,13,14,15],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["coreinstruction",4]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["",0],["coreinstruction",4]],["bool",0]],[[["",0],["",0]],["bool",0]],[[]],[[["",0]]],[[]],[[["symbol",3],["symbol",3]],["option",4]],[[],["usize",0]],[[]],[[["",0]],["usize",0]],null,null,[[],["type",4]],[[["",0]],["type",4]],[[]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["type",4]],[[],["type",4]],[[],["type",4]],[[],["type",4]],[[],["type",4]],[[],["type",4]],[[],["type",4]],[[],["type",4]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[]],[[]],[[]],[[]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[],["type",4]],[[],["type",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[],["type",4]],[[],["type",4]],[[],["type",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]]],"p":[[4,"CoreInstruction"],[8,"CoreFunction"],[3,"BHP256Hash"],[3,"BHP256Commit"],[3,"BHP512Hash"],[3,"BHP512Commit"],[3,"BHP768Hash"],[3,"BHP768Commit"],[3,"BHP1024Hash"],[3,"BHP1024Commit"],[3,"Pedersen64Hash"],[3,"Pedersen128Hash"],[3,"Poseidon2Hash"],[3,"Poseidon4Hash"],[3,"Poseidon8Hash"]]},\
"leo_errors":{"doc":"leo-errors","t":[0,14,0,0,0,0,0,0,0,3,17,12,11,11,11,11,12,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,12,11,11,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,8,11,10,10,10,10,10,10,12,12,12,3,3,8,6,3,3,3,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,10,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,13,13,13,13,13,13,13,4,13,13,6,13,0,11,11,0,0,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,0,0,11,11,11,11,0,11,12,12,12,12,12,12,12,12,12,12,0,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,0,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,0,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,0,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,12,12,0,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,0,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,0,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,0,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,4,13,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,12,0,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12],"n":["common","create_messages","emitter","errors","warnings","backtraced","formatted","macros","traits","Backtraced","INDENT","backtrace","borrow","borrow_mut","clone","clone_into","code","code_identifier","default","deref","deref_mut","description","drop","eq","error","error_code","exit_code","fmt","fmt","from","get_hash","hash","help","init","into","message","new_from_backtrace","to_owned","to_string","try_from","try_into","type_","type_id","warning_code","Formatted","backtrace","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","description","drop","eq","error_code","exit_code","fmt","fmt","from","get_hash","hash","init","into","ne","new_from_span","span","to_owned","to_string","try_from","try_into","type_id","warning_code","LeoMessageCode","code_identifier","code_mask","error_code","exit_code","is_error","message_type","warning_code","0","0","1","Buffer","BufferEmitter","Emitter","ErrBuffer","Handler","HandlerInner","StderrEmitter","WarningBuffer","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","default","default","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","emit_err","emit_err","emit_err","emit_err","emit_err","emit_warning","emit_warning","emit_warning","emit_warning","emit_warning","emitter","err_count","err_count","extend_if_error","extract_errs","extract_warnings","fatal_err","fmt","fmt","from","from","from","from","from","had_errors","init","init","init","init","init","inner","into","into","into","into","into","into_inner","last_emited_err_code","last_emitted_err_code","last_emitted_err_code","last_emitted_err_code","last_entry","last_err","last_error_code","new","new","new_with_buf","push","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","warn_count","warning_count","with","Anyhow","AstError","CliError","CompilerError","FlattenError","InputError","LastErrorCode","LeoError","PackageError","ParserError","Result","TypeCheckerError","ast","borrow","borrow_mut","cli","compiler","deref","deref_mut","drop","error_code","exit_code","flattener","fmt","fmt","from","from","from","from","from","from","from","from","from","from","init","input","into","package","parser","source","to_string","try_from","try_into","type_checker","type_id","0","0","0","0","0","0","0","0","0","0","ast_errors","AstError","Backtraced","Formatted","borrow","borrow_mut","clone","clone_into","code_mask","deref","deref_mut","drop","empty_tuple","error_code","exit_code","failed_to_convert_ast_to_json_string","failed_to_convert_ast_to_json_value","failed_to_create_ast_json_file","failed_to_read_json_file","failed_to_read_json_string_to_ast","failed_to_write_ast_to_json_file","fmt","fmt","from","from","from","init","into","is_error","message_type","num_exit_codes","one_element_tuple","shadowed_circuit","shadowed_function","shadowed_record","shadowed_variable","source","to_owned","to_string","try_from","try_into","type_id","warning_code","0","0","cli_errors","Backtraced","CliError","Formatted","borrow","borrow_mut","cli_io_error","clone","clone_into","code_mask","could_not_fetch_versions","deref","deref_mut","drop","error_code","exit_code","failed_to_enable_ansi_support","failed_to_execute_aleo_build","failed_to_execute_aleo_new","failed_to_execute_aleo_run","failed_to_load_instructions","failed_to_parse_aleo_new","failed_to_parse_aleo_run","fmt","fmt","from","from","from","init","into","is_error","message_type","num_exit_codes","old_release_version","self_update_build_error","self_update_error","source","to_owned","to_string","try_from","try_into","type_id","warning_code","0","0","compiler_errors","Backtraced","CompilerError","Formatted","borrow","borrow_mut","cannot_open_cwd","clone","clone_into","code_mask","deref","deref_mut","drop","error_code","exit_code","file_read_error","fmt","fmt","from","from","from","illegal_static_member_assignment","import_not_found","init","into","is_error","message_type","num_exit_codes","source","to_owned","to_string","try_from","try_into","type_id","warning_code","0","0","flattener_errors","Backtraced","FlattenError","Formatted","binary_overflow","borrow","borrow_mut","clone","clone_into","code_mask","deref","deref_mut","drop","error_code","exit_code","fmt","fmt","from","from","from","init","into","is_error","loop_has_neg_value","message_type","num_exit_codes","source","to_owned","to_string","try_from","try_into","type_id","type_name","unary_overflow","warning_code","0","0","input_errors","Backtraced","Formatted","InputError","borrow","borrow_mut","clone","clone_into","code_mask","deref","deref_mut","drop","error_code","exit_code","fmt","fmt","from","from","from","illegal_expression","init","into","is_error","message_type","num_exit_codes","source","to_owned","to_string","try_from","try_into","type_id","unexpected_section","unexpected_type","warning_code","0","0","package_errors","Backtraced","Formatted","PackageError","borrow","borrow_mut","clone","clone_into","code_mask","deref","deref_mut","directory_not_found","drop","error_code","exit_code","failed_to_create_aleo_file","failed_to_create_directory","failed_to_create_inputs_directory","failed_to_create_source_directory","failed_to_get_file_name","failed_to_get_input_file_entry","failed_to_get_input_file_type","failed_to_get_leo_file_entry","failed_to_get_leo_file_extension","failed_to_initialize_package","failed_to_open_aleo_file","failed_to_open_manifest","failed_to_read_checksum_file","failed_to_read_circuit_file","failed_to_read_file","failed_to_read_input_file","failed_to_read_inputs_directory","failed_to_read_snapshot_file","failed_to_remove_aleo_file","failed_to_remove_checksum_file","failed_to_remove_circuit_file","failed_to_remove_directory","failed_to_remove_snapshot_file","failed_to_set_cwd","failed_to_write_aleo_file","fmt","fmt","from","from","from","init","into","invalid_input_file_type","invalid_leo_file_extension","invalid_package_name","io_error_checksum_file","io_error_circuit_file","io_error_gitignore_file","io_error_input_file","io_error_main_file","is_error","message_type","num_exit_codes","source","to_owned","to_string","try_from","try_into","type_id","warning_code","0","0","parser_errors","Backtraced","Formatted","ParserError","borrow","borrow_mut","circuit_constants_unstable","circuit_functions_unstable","clone","clone_into","code_mask","could_not_lex","deref","deref_mut","drop","error_code","exit_code","expr_stmts_disallowed","fmt","fmt","from","from","from","implicit_values_not_allowed","init","inputs_multiple_variable_types_specified","into","invalid_address_lit","invalid_associated_access","invalid_import_list","invalid_method_call","is_error","leo_imports_only","lexer_bidi_override","lexer_block_comment_does_not_close_before_eof","lexer_empty_block_comment","lexer_empty_input","lexer_expected_valid_escaped_char","lexer_hex_number_provided","lexer_string_not_closed","message_type","mixed_commas_and_semicolons","num_exit_codes","source","spread_in_array_init","test_function","to_owned","to_string","try_from","try_into","type_id","unexpected","unexpected_eof","unexpected_ident","unexpected_statement","unexpected_str","unexpected_token","unexpected_whitespace","warning_code","0","0","type_checker_error","Backtraced","Formatted","TypeCheckerError","borrow","borrow_mut","cannot_assign_to_const_input","cannot_assign_to_const_var","clone","clone_into","code_mask","compare_address","core_type_name_conflict","could_not_determine_type","deref","deref_mut","drop","duplicate_circuit_member","duplicate_record_variable","error_code","exit_code","expected_one_type_of","fmt","fmt","from","from","from","function_has_no_return","incorrect_num_args_to_call","incorrect_num_circuit_members","incorrect_tuple_length","init","into","invalid_assignment_target","invalid_circuit","invalid_circuit_variable","invalid_core_circuit_call","invalid_core_instruction","invalid_int_value","invalid_tuple","is_error","loop_body_contains_return","message_type","missing_circuit_member","num_exit_codes","record_var_wrong_type","required_record_variable","source","to_owned","to_string","try_from","try_into","tuple_not_allowed","tuple_out_of_range","type_id","type_should_be","unknown_sym","unreachable_code_after_return","warning_code","0","0","LeoWarning","ParserWarning","borrow","borrow_mut","deref","deref_mut","drop","error_code","fmt","fmt","from","from","init","into","parser","source","to_string","try_from","try_into","type_id","0","parser_warning","Backtraced","Formatted","ParserWarning","borrow","borrow_mut","clone","clone_into","code_mask","const_parameter_or_input","deref","deref_mut","drop","error_code","exit_code","fmt","fmt","from","from","from","init","into","is_error","message_type","num_exit_codes","source","to_owned","to_string","try_from","try_into","type_id","warning_code","0","0"],"q":["leo_errors","","","","","leo_errors::common","","","","leo_errors::common::backtraced","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_errors::common::formatted","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_errors::common::traits","","","","","","","","leo_errors::emitter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_errors::errors","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_errors::errors::LeoError","","","","","","","","","","leo_errors::errors::ast","leo_errors::errors::ast::ast_errors","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_errors::errors::ast::ast_errors::AstError","","leo_errors::errors::cli","leo_errors::errors::cli::cli_errors","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_errors::errors::cli::cli_errors::CliError","","leo_errors::errors::compiler","leo_errors::errors::compiler::compiler_errors","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_errors::errors::compiler::compiler_errors::CompilerError","","leo_errors::errors::flattener","leo_errors::errors::flattener::flattener_errors","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_errors::errors::flattener::flattener_errors::FlattenError","","leo_errors::errors::input","leo_errors::errors::input::input_errors","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_errors::errors::input::input_errors::InputError","","leo_errors::errors::package","leo_errors::errors::package::package_errors","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_errors::errors::package::package_errors::PackageError","","leo_errors::errors::parser","leo_errors::errors::parser::parser_errors","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_errors::errors::parser::parser_errors::ParserError","","leo_errors::errors::type_checker","leo_errors::errors::type_checker::type_checker_error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_errors::errors::type_checker::type_checker_error::TypeCheckerError","","leo_errors::warnings","","","","","","","","","","","","","","","","","","","","leo_errors::warnings::LeoWarning","leo_errors::warnings::parser","leo_errors::warnings::parser::parser_warning","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_errors::warnings::parser::parser_warning::ParserWarning",""],"d":["Contains the common functionalities for defining errors..","A macro that given an enum, exit code mask, error code …","Contains traits and types for channels through which …","Contains the errors for the Leo lang.","Contains the warnings for the Leo lang.","This module contains a backtraced error and its methods.","This module contains a formatted error and its methods.","This module contains the macros for making errors easily.","This module contains traits for making errors easily.","Backtraced compiler ouput type undefined value <code>x</code> –&gt; …","The indent for an error message.","The backtrace representing where the error occured in Leo.","","","","","The error exit code.","The error leading digits identifier.","","","","","","","Is this Backtrace a warning or error?","Gets a unique error identifier.","Gets the backtraced error exit code.","","","Returns the argument unchanged.","","","The error help message if it exists.","","Calls <code>U::from(self)</code>.","The error message.","Creates a backtraced error from a backtrace.","","","","","The characters representing the type of error.","","Gets a unique warning identifier.","Formatted compiler error type undefined value <code>x</code> –&gt; …","The backtrace to track where the Leo error originated.","","","","","","","","","","","Returns an error identifier.","Calls the backtraces error exit code.","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","Creates a backtraced error from a span and a backtrace.","The formatted error span information.","","","","","","Returns an warning identifier.","MessageCode trait that all Errors should implement.","The LeoErrorCode which has a default code identifier of 037","Returns the messages’s exit code mask, as to avoid …","Returns the prefixed error identifier.","Returns the error’s exit code for the program.","Returns if the message is an error or warning.","Returns the message’s code type for the program.","Returns the prefixed warning identifier.","","","","A buffer of <code>T</code>s.","An <code>Emitter</code> that collects into a list.","Types that are sinks for compiler errors.","A buffer of <code>LeoError</code>s.","A handler deals with errors and other compiler output.","Contains the actual data for <code>Handler</code>. Modelled this way to …","A trivial <code>Emitter</code> using the standard error.","A buffer of <code>LeoWarning</code>s.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Emit the error <code>err</code>.","","Emit the error <code>err</code>.","Emit the error <code>err</code>.","","Emit the warning.","","Emit the error <code>err</code>.","Emit the error <code>err</code>.","","The sink through which errors will be emitted.","The number of errors thus far.","Number of errors emitted thus far.","Extend handler with <code>error</code> given <code>res = Err(error)</code>.","Extracts all the errors collected in this emitter.","Extracts all the errors collected in this emitter.","Emits the error <code>err</code>. This will immediately abort …","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Did we have any errors thus far?","","","","","","The inner handler. <code>RefCell</code> is used here to avoid <code>&amp;mut</code> all …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Extract the underlying list of Ts.","Gets the last emitted error’s exit code.","Tracks last emitted error.","","","Last entry to the buffer.","Gets the last emitted error’s exit code if it exists. …","Exit code of the last emitted error.","Construct a <code>Handler</code> using the given <code>emitter</code>.","Returns a new buffered emitter.","Construct a <code>Handler</code> that will append to <code>buf</code>.","Push <code>x</code> to the buffer.","","","","","","","","","","","","","","","","","","Number of warnings emitted thus far.","The number of warnings thus far.","Runs <code>logic</code> provided a handler that collects all errors …","Anyhow errors.","Represents an AST Error in a Leo Error.","Represents an CLI Error in a Leo Error.","Represents an Compiler Error in a Leo Error.","Represents a Flatten Error in a Leo Error.","Represents an Input Error in a Leo Error.","Purely for just exiting with the correct status code and …","The LeoError type that contains all sub error types. This …","Represents an Package Error in a Leo Error.","Represents an Parser Error in a Leo Error.","A global result type for all Leo crates, that defaults the …","Represents a Type Checker Error in a Leo Error.","Contains the AST error definitions.","","","Contains the AST error definitions.","Contains the AST error definitions.","","","","Implement error code for each type of Error.","Implement exit code for each type of Error.","Contains the Flattener error definitions.","","","","Returns the argument unchanged.","","","","","","","","","","Contains the Input error definitions.","Calls <code>U::from(self)</code>.","Contains the Package error definitions.","Contains the Parser error definitions.","","","","","Contains the Type Checker error definitions.","","","","","","","","","","","","This module contains the AST error definitions.","AstError enum that represents all the errors for the …","","","","","","","","","","","For when a user tries to define an empty tuple.","","","For when the AST fails to be represented as a JSON string.","For when the AST fails to be represented as a JSON value.","For when the AST fails to create the AST JSON file.","For when the a JSON files fails to be represented as an …","For when the a JSON string fails to be represented as an …","For when the AST fails to write the AST JSON file.","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","For when a user tries to define a tuple dimension of one.","For when a user shadows a circuit.","For when a user shadows a function.","For when a user shadows a record.","For when a user shadows a variable.","","","","","","","","","","This module contains the CLI error definitions.","","CliError enum that represents all the errors for the …","","","","For when the CLI experiences an IO error.","","","","For when the CLI could not fetch the versions.","","","","","","For when the CLI fails to enable ansi support.","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","For when the CLI has an old release version.","For when the CLI fails to self update.","For when the CLI fails to self update.","","","","","","","","","","This module contains the Compiler error definitions.","","CompilerError enum that represents all the errors for the …","","","","","","","","","","","","","For when the compiler can’t read a file from the …","","","Returns the argument unchanged.","","","For when a user tries to assign to a circuit static member.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","This module contains the Flattener error definitions.","","CliError enum that represents all the errors for the …","","For when a constant operation would cause an overflow.","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","For when a loop uses a negative value.","","","","","","","","","Generates the type name of a value.","For when a constant operation would cause an overflow.","","","","This module contains the Input error definitions.","","","InputError enum that represents all the errors for the …","","","","","","","","","","","","","","","Returns the argument unchanged.","For when the expression is not allowed in an input file.","","Calls <code>U::from(self)</code>.","","","","","","","","","","For when section name is not an allowed one.","For when declared variable type mismatches actual type.","","","","This module contains the Package error definitions.","","","PackageError enum that represents all the errors for the …","","","","","","","","For when opening a directory failed.","","","","","For when creating a directory failed.","For when creating the inputs directory failed.","For when creating the source directory failed.","","For when getting a input file entry failed.","For when getting the input file type failed.","For when getting a Leo file entry failed.","For when getting the source file extension failed.","For when the package failed to initalize.","","","For when reading the checksum file failed.","For when reading the circuit file failed.","For when file could not be read.","For when reading the input file failed.","For when reading the input directory failed.","For when reading the snapshot file failed.","","For when removing the checksum file failed.","For when removing the circuit file failed.","For when removing a directory failed.","For when removing the snapshot file failed.","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","For when getting the input file has an invalid file type.","For when the Leo file has an invalid extension.","For when the package has an invalid name.","For when the checksum file has an IO error.","For when the circuit file has an IO error.","For when the gitignore file has an IO error.","For when the input file has an IO error.","For when the main file has an IO error.","","","","","","","","","","","","","This module contains the Parser error definitions.","","","ParserError enum that represents all the errors for the …","","","Circuit constants are unstable in testnet3.","Circuit functions are unstable in testnet3.","","","","When the lexer could not lex some text.","","","","","","Parsed an expression statement.","","","","","Returns the argument unchanged.","When the user tries to pass an implicit value.","","For when a user specified more than a type on a parameter.","Calls <code>U::from(self)</code>.","For when the parser encountered an invalid address literal.","","For when the parser encountered an empty import list.","Parsed an unknown method call on the type of an expression.","","","For when the lexer encountered a bidi override character","When a block comment is not closed before end of file.","When a block comment is empty.","When more input was expected but not found.","When an integer is started with a leading zero.","When a hex number is provided.","When a string is not properly closed.","","For when the parser encountered a mix of commas and …","","","For when the parser encountered an unexpected spread in an …","For when the parser encountered a deprecated <code>test function</code>.","","","","","","For when the parser encountered an unexpected list of …","For when the parser encountered an unexpected End of File.","For when the parser encountered an unexpected identifier.","For when the parser encountered an unexpected statement.","For when the parser encountered an unexpected string.","For when the parser encountered an unexpected token.","For when the parser encountered an unexpected whitespace.","","","","This module contains the Input error definitions.","","","InputError enum that represents all the errors for the …","","","For when the user tries to assign to a const input.","For when the user tries to assign to a const input.","","","","","For when a circuit is created with the same name as a core …","For when the type checker cannot determine the type of an …","","","","Attempted to define more that one circuit member with the …","Attempted to define more that one record variable with the …","","","For when one of the following types was expected.","","","Returns the argument unchanged.","","","For when a function doesn’t have a return statement.","For when the user tries calls a function with the …","For when the user tries initialize a circuit with the …","","","Calls <code>U::from(self)</code>.","For when the parser encountered an invalid assignment …","Attempted to access an invalid circuit.","Attempted to access an invalid circuit variable.","An invalid access call is made e.g., <code>bool::MAX</code>","For when an invalid core instruction is used.","For when an integer is not in a valid range.","","","","","For when the user is missing a circuit member during …","","","","","","","","","","","","For when the user tries to assign to a const input.","For when the user tries to return a unknown variable.","","","","","The LeoWarning type that contains all sub error types. …","Represents an Parser Error in a Leo Error.","","","","","","Implement warning code for each type of Warning.","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Contains the Parser warning definitions.","","","","","","","This module contains the Parser error definitions.","","","ParserWarning enum that represents all the warnings for …","","","","","","For when a user used const on a parameter or input instead …","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,3,3,3,3,3,3,3,4,5,5,0,0,0,0,0,0,0,0,6,7,8,4,5,6,7,8,4,5,5,5,8,4,5,6,7,8,4,5,6,7,8,4,5,6,7,8,4,5,9,6,7,8,5,9,6,7,8,5,7,8,7,8,5,5,8,4,4,6,7,8,4,5,8,6,7,8,4,5,8,6,7,8,4,5,4,7,9,6,5,4,8,6,8,5,8,4,5,4,6,7,8,4,5,6,7,8,4,5,6,7,8,4,5,7,8,8,10,10,10,10,10,10,10,0,10,10,0,10,0,10,10,0,0,10,10,10,10,10,0,10,10,10,10,10,10,10,10,10,10,10,10,10,0,10,0,0,10,10,10,10,0,10,11,12,13,14,15,16,17,18,19,20,0,0,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,23,0,24,0,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,25,26,0,27,0,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,28,29,0,30,0,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,0,30,30,31,32,0,33,33,0,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,34,35,0,36,36,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,37,38,0,39,39,0,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,40,41,0,42,42,0,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,43,44,0,45,45,45,45,45,45,45,45,45,45,45,45,45,0,45,45,45,45,45,46,0,47,47,0,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,48,49],"f":[null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]]],[[["",0],["",0]]],null,null,[[]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["",0]],["str",0]],[[["usize",0]]],[[["",0],["",0]],["bool",0]],null,[[["",0]],["string",3]],[[["",0]],["i32",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]]],null,[[],["usize",0]],[[]],null,[[["option",4,[["string",3]]],["i32",0],["i8",0],["string",3],["bool",0],["backtrace",3]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],null,[[["",0]],["typeid",3]],[[["",0]],["string",3]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["formatted",3]],[[["",0],["",0]]],[[],["formatted",3]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["",0]],["str",0]],[[["usize",0]]],[[["",0],["formatted",3]],["bool",0]],[[["",0]],["string",3]],[[["",0]],["i32",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]]],[[],["usize",0]],[[]],[[["",0],["formatted",3]],["bool",0]],[[["option",4,[["string",3]]],["i32",0],["i8",0],["string",3],["bool",0],["span",3],["backtrace",3]]],null,[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["string",3]],null,[[],["i8",0]],[[],["i32",0]],[[["",0]],["string",3]],[[["",0]],["i32",0]],[[],["bool",0]],[[],["string",3]],[[["",0]],["string",3]],null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["bufferemitter",3]],[[["",0],["",0]]],[[]],[[]],[[],["bufferemitter",3]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["",0],["leoerror",4]]],[[["",0],["leoerror",4]]],[[["",0],["leoerror",4]]],[[["",0],["into",8,[["leoerror",4]]]]],[[["",0],["leoerror",4]]],[[["",0],["leowarning",4]]],[[["",0],["leowarning",4]]],[[["",0],["leowarning",4]]],[[["",0],["leowarning",4]]],[[["",0],["leowarning",4]]],null,[[["",0]],["usize",0]],null,[[["",0],["result",4,[["leoerror",4]]]],["result",4]],[[["",0]],["errbuffer",6]],[[["",0]],["warningbuffer",6]],[[["",0],["leoerror",4]],["never",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["bool",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],null,[[]],[[]],[[]],[[]],[[]],[[],["vec",3]],[[["",0]],["option",4,[["i32",0]]]],[[["",0]],["option",4,[["i32",0]]]],[[["",0]],["option",4,[["i32",0]]]],[[["",0]],["option",4,[["i32",0]]]],[[["",0]],["option",4]],[[["",0]],["result",4,[["leoerror",4]]]],null,[[["box",3,[["emitter",8]]]]],[[]],[[]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,[[["",0]],["usize",0]],[[],["result",4,[["errbuffer",6]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],null,null,[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["",0]],["string",3]],[[["",0]],["i32",0]],null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["asterror",4]]],[[]],[[["parsererror",4]]],[[["error",3]]],[[["packageerror",4]]],[[["flattenerror",4]]],[[["clierror",4]]],[[["typecheckererror",4]]],[[["compilererror",4]]],[[["inputerror",4]]],[[],["usize",0]],null,[[]],null,null,[[["",0]],["option",4,[["error",8]]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],null,[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["asterror",4]],[[["",0],["",0]]],[[],["i32",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["span",3]]],[[["",0]],["string",3]],[[["",0]],["i32",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[["backtraced",3]]],[[["formatted",3]]],[[],["usize",0]],[[]],[[],["bool",0]],[[],["string",3]],[[],["i32",0]],[[["span",3]]],[[["span",3]]],[[["span",3]]],[[["span",3]]],[[["span",3]]],[[["",0]],["option",4,[["error",8]]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["string",3]],null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[["",0]],["clierror",4]],[[["",0],["",0]]],[[],["i32",0]],[[]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["",0]],["string",3]],[[["",0]],["i32",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["backtraced",3]]],[[["formatted",3]]],[[]],[[],["usize",0]],[[]],[[],["bool",0]],[[],["string",3]],[[],["i32",0]],[[]],[[]],[[]],[[["",0]],["option",4,[["error",8]]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["string",3]],null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["span",3]]],[[["",0]],["compilererror",4]],[[["",0],["",0]]],[[],["i32",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["",0]],["string",3]],[[["",0]],["i32",0]],[[]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[["backtraced",3]]],[[["formatted",3]]],[[["span",3]]],[[["span",3]]],[[],["usize",0]],[[]],[[],["bool",0]],[[],["string",3]],[[],["i32",0]],[[["",0]],["option",4,[["error",8]]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["string",3]],null,null,null,null,null,null,[[["span",3]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["flattenerror",4]],[[["",0],["",0]]],[[],["i32",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["",0]],["string",3]],[[["",0]],["i32",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[["backtraced",3]]],[[["formatted",3]]],[[],["usize",0]],[[]],[[],["bool",0]],[[["span",3]]],[[],["string",3]],[[],["i32",0]],[[["",0]],["option",4,[["error",8]]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["str",0]],[[["span",3]]],[[["",0]],["string",3]],null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["inputerror",4]],[[["",0],["",0]]],[[],["i32",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["",0]],["string",3]],[[["",0]],["i32",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["formatted",3]]],[[["backtraced",3]]],[[]],[[["span",3]]],[[],["usize",0]],[[]],[[],["bool",0]],[[],["string",3]],[[],["i32",0]],[[["",0]],["option",4,[["error",8]]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["span",3]]],[[["span",3]]],[[["",0]],["string",3]],null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["packageerror",4]],[[["",0],["",0]]],[[],["i32",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[]],[[["usize",0]]],[[["",0]],["string",3]],[[["",0]],["i32",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[["backtraced",3]]],[[["formatted",3]]],[[],["usize",0]],[[]],[[["filetype",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",0]],[[],["string",3]],[[],["i32",0]],[[["",0]],["option",4,[["error",8]]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["string",3]],null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["span",3]]],[[["span",3]]],[[["",0]],["parsererror",4]],[[["",0],["",0]]],[[],["i32",0]],[[]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["",0]],["string",3]],[[["",0]],["i32",0]],[[["span",3]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["formatted",3]]],[[["backtraced",3]]],[[]],[[["span",3]]],[[],["usize",0]],[[["span",3]]],[[]],[[["span",3]]],[[["span",3]]],[[["span",3]]],[[["span",3]]],[[],["bool",0]],[[["span",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[["span",3]]],[[],["i32",0]],[[["",0]],["option",4,[["error",8]]]],[[["span",3]]],[[["span",3]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["span",3]]],[[["span",3]]],[[["span",3]]],[[["span",3]]],[[["span",3]]],[[["span",3]]],[[["span",3]]],[[["",0]],["string",3]],null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["span",3]]],[[["span",3]]],[[["",0]],["typecheckererror",4]],[[["",0],["",0]]],[[],["i32",0]],[[["span",3]]],[[["span",3]]],[[["span",3]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["span",3]]],[[["span",3]]],[[["",0]],["string",3]],[[["",0]],["i32",0]],[[["span",3]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[["formatted",3]]],[[["backtraced",3]]],[[["span",3]]],[[["span",3]]],[[["span",3]]],[[["span",3]]],[[],["usize",0]],[[]],[[["span",3]]],[[["span",3]]],[[["span",3]]],[[["span",3]]],[[["span",3]]],[[["span",3]]],[[["span",3]]],[[],["bool",0]],[[["span",3]]],[[],["string",3]],[[["span",3]]],[[],["i32",0]],[[["span",3]]],[[["span",3]]],[[["",0]],["option",4,[["error",8]]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["span",3]]],[[["span",3]]],[[["",0]],["typeid",3]],[[["span",3]]],[[["span",3]]],[[["span",3]]],[[["",0]],["string",3]],null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["",0]],["string",3]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["parserwarning",4]]],[[]],[[],["usize",0]],[[]],null,[[["",0]],["option",4,[["error",8]]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["parserwarning",4]],[[["",0],["",0]]],[[],["i32",0]],[[["span",3]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["",0]],["string",3]],[[["",0]],["i32",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[["formatted",3]]],[[["backtraced",3]]],[[],["usize",0]],[[]],[[],["bool",0]],[[],["string",3]],[[],["i32",0]],[[["",0]],["option",4,[["error",8]]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["string",3]],null,null],"p":[[3,"Backtraced"],[3,"Formatted"],[8,"LeoMessageCode"],[3,"Buffer"],[3,"BufferEmitter"],[3,"StderrEmitter"],[3,"HandlerInner"],[3,"Handler"],[8,"Emitter"],[4,"LeoError"],[13,"AstError"],[13,"CliError"],[13,"CompilerError"],[13,"InputError"],[13,"PackageError"],[13,"ParserError"],[13,"TypeCheckerError"],[13,"FlattenError"],[13,"LastErrorCode"],[13,"Anyhow"],[4,"AstError"],[13,"Formatted"],[13,"Backtraced"],[4,"CliError"],[13,"Formatted"],[13,"Backtraced"],[4,"CompilerError"],[13,"Formatted"],[13,"Backtraced"],[4,"FlattenError"],[13,"Formatted"],[13,"Backtraced"],[4,"InputError"],[13,"Formatted"],[13,"Backtraced"],[4,"PackageError"],[13,"Formatted"],[13,"Backtraced"],[4,"ParserError"],[13,"Formatted"],[13,"Backtraced"],[4,"TypeCheckerError"],[13,"Formatted"],[13,"Backtraced"],[4,"LeoWarning"],[13,"ParserWarning"],[4,"ParserWarning"],[13,"Formatted"],[13,"Backtraced"]]},\
"leo_lang":{"doc":"Leo is a functional, statically-typed programming language …","t":[0,0,0,0,17,2,2,8,16,6,2,16,2,10,0,0,11,11,0,10,0,11,3,3,11,11,11,11,11,11,11,11,11,11,11,5,12,11,11,11,11,11,11,11,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,3,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,3,7,12,11,11,11,11,11,11,11,12,12,12,12,11,11,12,11,11,11,5,11,12,11,11,11,11,11,11,11,11,11,11,11,11,18,18,18,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["commands","context","logger","updater","ALEO_CLI_COMMAND","Build","Clean","Command","Input","Network","New","Output","Run","apply","build","clean","execute","log_span","new","prelude","run","try_execute","Build","BuildOptions","apply","augment_args","augment_args","augment_args_for_update","augment_args_for_update","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","compile_leo_file","compiler_options","default","deref","deref","deref_mut","deref_mut","drop","drop","enable_all_ast_snapshots","enable_code_generation","enable_initial_ast_snapshot","enable_initial_input_ast_snapshot","enable_spans","enable_ssa_ast_snapshot","enable_unrolled_ast_snapshot","fmt","fmt","from","from","from_arg_matches","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","init","init","into","into","into_app","into_app","into_app_for_update","into_app_for_update","log_span","prelude","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","vzip","vzip","Clean","apply","augment_args","augment_args_for_update","borrow","borrow_mut","deref","deref_mut","drop","fmt","from","from_arg_matches","from_arg_matches_mut","init","into","into_app","into_app_for_update","log_span","prelude","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","vzip","New","apply","augment_args","augment_args_for_update","borrow","borrow_mut","deref","deref_mut","drop","fmt","from","from_arg_matches","from_arg_matches_mut","init","into","into_app","into_app_for_update","log_span","name","prelude","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","vzip","Run","apply","augment_args","augment_args_for_update","borrow","borrow_mut","compiler_options","deref","deref_mut","drop","fmt","from","from_arg_matches","from_arg_matches_mut","init","into","into_app","into_app_for_update","log_span","name","prelude","skip_key_check","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","vzip","Context","borrow","borrow_mut","clone","clone_into","deref","deref_mut","dir","drop","from","init","into","new","open_manifest","path","to_owned","try_from","try_into","type_id","vzip","Format","START","ansi","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","display_level","display_target","display_thread_id","display_thread_name","drop","fmt","format","format_event","from","init","init_logger","into","timer","to_owned","try_from","try_into","type_id","vzip","with_ansi","with_level","with_target","with_thread_ids","with_thread_names","with_timer","without_time","LEO_BIN_NAME","LEO_REPO_NAME","LEO_REPO_OWNER","Updater","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","print_cli","show_available_releases","try_from","try_into","type_id","update_available","update_to_latest_release","vzip"],"q":["leo_lang","","","","leo_lang::commands","","","","","","","","","","","","","","","","","","leo_lang::commands::build","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_lang::commands::clean","","","","","","","","","","","","","","","","","","","","","","","","","leo_lang::commands::new","","","","","","","","","","","","","","","","","","","","","","","","","","leo_lang::commands::run","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_lang::context","","","","","","","","","","","","","","","","","","","","leo_lang::logger","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_lang::updater","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","Base trait for the Leo CLI, see methods and their …","If the current command requires running another command …","","","Defines the output of this command, which may be used as …","","Runs the main operation of this command. This function is …","","","A wrapper around the <code>apply</code> method. This function sets up …","Adds a span to the logger via <code>tracing::span</code>. Because of …","","Runs the prelude and returns the Input of the current …","","Executes command but empty the result. Comes in handy …","Compile and build program command.","Compiler Options wrapper for Build command. Also used by …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Clean outputs folder command","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","Create new Leo project","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Build, Prove and Run Leo program with inputs","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Project context, manifest, current directory etc All the …","","","","","","","Returns the path to the Leo package.","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Returns the package name as a String. Opens the manifest …","Path at which the command is called, None when default","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Initialize logger with custom format and verbosity.","Calls <code>U::from(self)</code>.","","","","","","","Enable ANSI terminal colors for formatted output.","Sets whether or not an event’s level is displayed.","Sets whether or not an event’s target is displayed.","Sets whether or not the thread ID of the current thread is …","Sets whether or not the name of the current thread is …","Use the given <code>timer</code> for log message timestamps.","Do not emit timestamps with log messages.","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Display the CLI message, if the Leo configuration allows.","Show all available releases for <code>leo</code>.","","","","Check if there is an available update for <code>leo</code> and return …","Update <code>leo</code> to the latest release.",""],"i":[0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,1,1,0,1,0,1,0,0,2,3,2,3,2,3,2,3,2,3,3,0,2,3,3,2,3,2,3,2,3,3,3,3,3,3,3,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,2,2,3,3,2,3,2,3,2,3,2,3,2,3,2,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,[[["context",3]],["result",6]],null,null,[[["context",3]],["result",6]],[[["",0]],["span",3]],null,[[["",0],["context",3]],["result",6]],null,[[["context",3]],["result",6]],null,null,[[["context",3]],["result",6]],[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["buildoptions",3]],[[["",0],["",0]]],[[["pathbuf",3],["path",3],["string",3],["path",3],["path",3],["handler",3],["buildoptions",3]],["result",6,[["indexmap",3,[["symbol",3],["circuit",3]]]]]],null,[[],["buildoptions",3]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],null,null,null,null,null,null,null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["argmatches",3]],["result",4,[["error",3]]]],[[["argmatches",3]],["result",4,[["error",3]]]],[[["argmatches",3]],["result",4,[["error",3]]]],[[["argmatches",3]],["result",4,[["error",3]]]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[],["command",6]],[[],["command",6]],[[],["command",6]],[[],["command",6]],[[["",0]],["span",3]],[[["",0],["context",3]],["result",6]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],[[]],[[]],null,[[["context",3]],["result",6]],[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[]],[[["argmatches",3]],["result",4,[["error",3]]]],[[["argmatches",3]],["result",4,[["error",3]]]],[[],["usize",0]],[[]],[[],["command",6]],[[],["command",6]],[[["",0]],["span",3]],[[["",0],["context",3]],["result",6]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],[[]],null,[[["context",3]],["result",6]],[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[]],[[["argmatches",3]],["result",4,[["error",3]]]],[[["argmatches",3]],["result",4,[["error",3]]]],[[],["usize",0]],[[]],[[],["command",6]],[[],["command",6]],[[["",0]],["span",3]],null,[[["",0],["context",3]],["result",6]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],[[]],null,[[["context",3]],["result",6]],[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[]],[[["argmatches",3]],["result",4,[["error",3]]]],[[["argmatches",3]],["result",4,[["error",3]]]],[[],["usize",0]],[[]],[[],["command",6]],[[],["command",6]],[[["",0]],["span",3]],null,[[["",0],["context",3]],["result",6]],null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],[[]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["context",3]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["",0]],["result",6,[["pathbuf",3]]]],[[["usize",0]]],[[]],[[],["usize",0]],[[]],[[["option",4,[["pathbuf",3]]]],["result",6,[["context",3]]]],[[["",0]],["result",6,[["manifest",3,[["testnet3",3]]]]]],null,[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["format",3]],[[["",0],["",0]]],[[]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],null,null,null,null,[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],null,[[["",0],["fmtcontext",3],["writer",3],["event",3]],["result",6]],[[]],[[],["usize",0]],[[["str",0],["usize",0]],["result",6]],[[]],null,[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],[[["bool",0]],["format",3]],[[["bool",0]],["format",3]],[[["bool",0]],["format",3]],[[["bool",0]],["format",3]],[[["bool",0]],["format",3]],[[],["format",3]],[[],["format",3]],null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[]],[[],["usize",0]],[[]],[[]],[[],["result",6]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[],["result",6,[["string",3]]]],[[["bool",0]],["result",6,[["status",4]]]],[[]]],"p":[[8,"Command"],[3,"Build"],[3,"BuildOptions"],[3,"Clean"],[3,"New"],[3,"Run"],[3,"Context"],[3,"Format"],[3,"Updater"]]},\
"leo_package":{"doc":"leo-package","t":[7,0,0,0,0,0,5,0,0,0,7,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,7,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,7,3,11,11,11,11,11,11,11,11,11,11,5,11,11,11,7,3,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,7,0,0,0,0,7,13,13,13,4,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,7,3,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,7,3,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,7,3,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,12,11,11,11,11,12,0,7,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,7,3,11,11,11,11,11,11,11,11,11,11,11,11,11,7,3,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11],"n":["LEO_FILE_EXTENSION","build","imports","inputs","outputs","package","parse_file_paths","root","source","directory","BUILD_DIRECTORY_NAME","BuildDirectory","borrow","borrow_mut","create","deref","deref_mut","drop","from","init","into","open","remove","try_from","try_into","type_id","directory","IMPORTS_DIRECTORY_NAME","ImportsDirectory","borrow","borrow_mut","create","deref","deref_mut","drop","files","from","init","into","is_empty","remove","try_from","try_into","type_id","directory","input","INPUTS_DIRECTORY_NAME","InputsDirectory","borrow","borrow_mut","create","deref","deref_mut","drop","files","from","init","into","parse_file_paths","try_from","try_into","type_id","INPUT_FILE_EXTENSION","InputFile","borrow","borrow_mut","deref","deref_mut","deserialize","drop","exists_at","filename","from","init","into","new","package_name","read_from","setup_file_path","template","try_from","try_into","type_id","write_to","MAIN_ALEO_FILE_NAME","ast_snapshot","checksum","circuit","directory","AST_SNAPSHOT_FILE_EXTENSION","Canonicalization","ImportsResolved","Initial","Snapshot","SnapshotFile","TypeInference","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","exists_at","fmt","from","from","init","init","into","into","new","package_name","read_from","remove","snapshot","snapshot_file_path","to_string","try_from","try_from","try_into","try_into","type_id","type_id","CHECKSUM_FILE_EXTENSION","ChecksumFile","borrow","borrow_mut","deref","deref_mut","deserialize","drop","exists_at","from","init","into","new","package_name","read_from","remove","setup_file_path","try_from","try_into","type_id","write_to","CIRCUIT_FILE_EXTENSION","CircuitFile","borrow","borrow_mut","deref","deref_mut","deserialize","drop","exists_at","from","init","into","new","package_name","read_from","remove","setup_file_path","try_from","try_into","type_id","write_to","OUTPUTS_DIRECTORY_NAME","OutputsDirectory","borrow","borrow_mut","create","deref","deref_mut","drop","from","init","into","remove","try_from","try_into","type_id","Package","borrow","borrow_mut","can_initialize","deref","deref_mut","description","deserialize","drop","from","init","initialize","into","is_initialized","is_package_name_valid","license","name","new","try_from","try_into","type_id","version","gitignore","GITIGNORE_FILENAME","Gitignore","borrow","borrow_mut","default","deref","deref_mut","deserialize","drop","exists_at","from","init","into","new","template","try_from","try_into","type_id","write_to","directory","main","SOURCE_DIRECTORY_NAME","SourceDirectory","borrow","borrow_mut","create","deref","deref_mut","drop","files","from","init","into","try_from","try_into","type_id","MAIN_FILENAME","MainFile","borrow","borrow_mut","deref","deref_mut","deserialize","drop","exists_at","filename","from","init","into","new","package_name","template","try_from","try_into","type_id","write_to"],"q":["leo_package","","","","","","","","","leo_package::build","leo_package::build::directory","","","","","","","","","","","","","","","","leo_package::imports","leo_package::imports::directory","","","","","","","","","","","","","","","","","leo_package::inputs","","leo_package::inputs::directory","","","","","","","","","","","","","","","","leo_package::inputs::input","","","","","","","","","","","","","","","","","","","","","","leo_package::outputs","","","","","leo_package::outputs::ast_snapshot","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_package::outputs::checksum","","","","","","","","","","","","","","","","","","","","","leo_package::outputs::circuit","","","","","","","","","","","","","","","","","","","","","leo_package::outputs::directory","","","","","","","","","","","","","","","leo_package::package","","","","","","","","","","","","","","","","","","","","","","leo_package::root","leo_package::root::gitignore","","","","","","","","","","","","","","","","","","","leo_package::source","","leo_package::source::directory","","","","","","","","","","","","","","","leo_package::source::main","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","Creates a directory at the provided path with the default …","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Returns the path to the build directory if it exists.","Removes the directory at the provided path.","","","","","","","","","Creates a directory at the provided path with the default …","","","","Returns a list of files in the imports directory.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Returns true if the imports directory does not exist or …","Removes the directory at the provided path.","","","","","The <code>program.in</code> file.","","","","","Creates a directory at the provided path with the default …","","","","Returns a list of files in the input directory.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","Reads the program input variables from the given file path …","","","","","","Writes the standard input format to a file.","","The serialized circuit output file.","The build checksum file.","The serialized circuit output file.","","","","","","Enum to handle all 3 types of snapshots.","Generic Snapshot file wrapper. Each package can have up to …","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Reads the serialized circuit from the given file path if …","Removes the serialized circuit at the given path if it …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","Reads the checksum from the given file path if it exists.","Removes the checksum at the given path if it exists. …","","","","","Writes the given checksum to a file.","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","Reads the serialized circuit from the given file path if …","Removes the serialized circuit at the given path if it …","","","","","Writes the given serialized circuit to a file.","","","","","Creates a directory at the provided path with the default …","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Removes the directory at the provided path.","","","","","","","Returns <code>true</code> if a package is can be initialized at a given …","","","","","","Returns the argument unchanged.","","Creates a Leo package at the given path","Calls <code>U::from(self)</code>.","Returns <code>true</code> if a package is initialized at the given path","Returns <code>true</code> if the package name is valid.","","","","","","","","The <code>.gitignore</code> file.","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","The <code>main.leo</code> file.","","","","","Creates a directory at the provided path with the default …","","","","Returns a list of files in the source directory.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,3,3,3,3,3,3,3,3,3,3,0,3,3,3,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0,0,0,0,0,5,5,5,0,0,5,5,6,5,6,5,6,5,6,5,6,5,6,6,5,5,6,5,6,5,6,6,6,6,6,6,6,5,5,6,5,6,5,6,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,0,9,9,9,9,9,9,9,9,9,9,9,9,9,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,12,12,12,12,12,12,12,12,12,12,12,12,12,0,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13],"f":[null,null,null,null,null,null,[[["readdir",3],["vec",3]],["result",6]],null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["path",3]],["result",6,[["pathbuf",3]]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[]],[[],["usize",0]],[[]],[[["path",3]],["result",6,[["pathbuf",3]]]],[[["path",3]],["result",6,[["string",3]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["path",3]],["result",6,[["pathbuf",3]]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["path",3]],["result",6,[["vec",3,[["pathbuf",3]]]]]],[[]],[[],["usize",0]],[[]],[[["path",3]],["result",6,[["bool",0]]]],[[["path",3]],["result",6,[["string",3]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["path",3]],["result",6]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["path",3]],["result",6,[["vec",3,[["pathbuf",3]]]]]],[[]],[[],["usize",0]],[[]],[[["readdir",3],["vec",3]],["result",6]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[["usize",0]]],[[["",0],["path",3]],["bool",0]],[[["",0]],["string",3]],[[]],[[],["usize",0]],[[]],[[["str",0]]],null,[[["",0],["path",3]],["result",6]],[[["",0],["path",3]],["cow",4,[["path",3]]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["path",3]],["result",6]],null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[],["result",4]],[[["usize",0]]],[[["usize",0]]],[[["",0],["path",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[["str",0],["snapshot",4]]],null,[[["",0],["path",3]],["result",6,[["string",3]]]],[[["",0],["path",3]],["result",6,[["bool",0]]]],null,[[["",0],["path",3]],["cow",4,[["path",3]]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[["usize",0]]],[[["",0],["path",3]],["bool",0]],[[]],[[],["usize",0]],[[]],[[["str",0]]],null,[[["",0],["path",3]],["result",6,[["string",3]]]],[[["",0],["path",3]],["result",6,[["bool",0]]]],[[["",0],["path",3]],["cow",4,[["path",3]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0],["path",3],["string",3]],["result",6]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[["usize",0]]],[[["",0],["path",3]],["bool",0]],[[]],[[],["usize",0]],[[]],[[["str",0]]],null,[[["",0],["path",3]],["result",6,[["string",3]]]],[[["",0],["path",3]],["result",6,[["bool",0]]]],[[["",0],["path",3]],["cow",4,[["path",3]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0],["path",3],["string",3]],["result",6]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["path",3]],["result",6,[["pathbuf",3]]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[]],[[],["usize",0]],[[]],[[["path",3]],["result",6,[["string",3]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["str",0],["path",3]],["bool",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],null,[[],["result",4]],[[["usize",0]]],[[]],[[],["usize",0]],[[["str",0],["path",3]],["result",6]],[[]],[[["str",0],["path",3]],["bool",0]],[[["str",0]],["bool",0]],null,null,[[["str",0]],["result",6]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[],["gitignore",3]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[["usize",0]]],[[["path",3]],["bool",0]],[[]],[[],["usize",0]],[[]],[[]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["path",3]],["result",6]],null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["path",3]],["result",6]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["path",3]],["result",6,[["vec",3,[["pathbuf",3]]]]]],[[]],[[],["usize",0]],[[]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[["usize",0]]],[[["path",3]],["bool",0]],[[],["string",3]],[[]],[[],["usize",0]],[[]],[[["str",0]]],null,[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["path",3]],["result",6]]],"p":[[3,"BuildDirectory"],[3,"ImportsDirectory"],[3,"InputsDirectory"],[3,"InputFile"],[4,"Snapshot"],[3,"SnapshotFile"],[3,"ChecksumFile"],[3,"CircuitFile"],[3,"OutputsDirectory"],[3,"Package"],[3,"Gitignore"],[3,"SourceDirectory"],[3,"MainFile"]]},\
"leo_parser":{"doc":"The parser to convert Leo code text into an [<code>AST</code>] type.","t":[17,5,5,0,0,0,0,0,0,5,5,0,0,17,3,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,17,5,17,17,2,0,0,5,5,3,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,5,11,12,11,11,12,11,11,11,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,17,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12],"n":["KEYWORD_TOKENS","parse_ast","parse_program_inputs","parser","tokenizer","context","expression","file","input","parse","parse_input","statement","type_","DUMMY_EOF","ParserContext","allow_identifier_underscores","bin_expr","borrow","borrow_mut","bump","check","check_int","deref","deref_mut","disallow_circuit_construction","drop","eat","eat_any","eat_bin_op","eat_group_partial","eat_identifier","eat_integer","emit_err","emit_warning","expect","expect_any","expect_identifier","from","handler","has_next","init","into","look_ahead","mk_ident_prev","new","parse_additive_expression","parse_assign_statement","parse_associated_access_expression","parse_bin_expr","parse_bitwise_and_expression","parse_bitwise_exclusive_or_expression","parse_bitwise_inclusive_or_expression","parse_block","parse_boolean_and_expression","parse_boolean_or_expression","parse_circuit","parse_circuit_init_expression","parse_circuit_member","parse_circuit_members","parse_conditional_expression","parse_conditional_statement","parse_console_args","parse_console_statement","parse_const_member_variable_declaration","parse_definition_statement","parse_equality_expression","parse_exponential_expression","parse_expr_tuple","parse_expression","parse_function","parse_function_parameter","parse_function_parameter_mode","parse_import","parse_input","parse_input_definition","parse_list","parse_loop_statement","parse_member_function_declaration","parse_member_variable_declaration","parse_method_call_expression","parse_multiplicative_expression","parse_ordering_expression","parse_paren_comma_list","parse_postfix_expression","parse_primary_expression","parse_primitive_type","parse_program","parse_return_statement","parse_section","parse_shift_expression","parse_statement","parse_tuple_expression","parse_tuple_type","parse_type","parse_typed_ident","parse_unary_expression","peek_group_coordinate","peek_is_function","peek_is_left_par","prev_token","token","tokens","try_from","try_into","type_id","unexpected","unexpected_item","vzip","INT_TYPES","assert_no_whitespace","ASSIGN_TOKENS","TYPE_TOKENS","KEYWORD_TOKENS","lexer","token","tokenize","tokenize_iter","SpannedToken","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","dummy","eat_identifier","ensure_no_bidi_override","fmt","fmt","from","init","into","is_bidi_override","serialize","span","to_owned","to_string","token","try_from","try_into","type_id","vzip","Add","AddAssign","Address","AddressLit","And","AndAssign","Arrow","Assign","BitAnd","BitAndAssign","BitOr","BitOrAssign","BitXor","BitXorAssign","Bool","Brace","Circuit","Colon","Comma","CommentBlock","CommentLine","Console","Const","Constant","Delimiter","Div","DivAssign","Dot","DotDot","DoubleColon","Else","Eof","Eq","False","Field","For","Function","Group","Gt","GtEq","I128","I16","I32","I64","I8","Identifier","If","Import","In","Integer","KEYWORD_TOKENS","LeftCurly","LeftParen","LeftSquare","Let","Lt","LtEq","Mul","MulAssign","Not","NotEq","Or","OrAssign","Parenthesis","Pow","PowAssign","Public","Question","Record","Rem","RemAssign","Return","RightCurly","RightParen","RightSquare","Scalar","SelfLower","Semicolon","Shl","ShlAssign","Shr","ShrAssign","Static","StaticString","String","Sub","SubAssign","Token","True","U128","U16","U32","U64","U8","Underscore","WhiteSpace","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","deserialize","drop","drop","eat","eat_integer","eq","equivalent","fmt","fmt","from","from","init","init","into","into","is_keyword","keyword_to_symbol","ne","open_close_pair","serialize","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","0","0","0","0","0","0"],"q":["leo_parser","","","","","leo_parser::parser","","","","","","","","leo_parser::parser::context","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_parser::parser::expression","","leo_parser::parser::statement","leo_parser::parser::type_","leo_parser::tokenizer","","","","","leo_parser::tokenizer::lexer","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_parser::tokenizer::token","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_parser::tokenizer::token::Token","","","","",""],"d":["Represents all valid Leo keyword tokens. This defers from …","Creates a new AST from a given file path and source code …","Parses program inputs from from the input file path and …","The parser to convert Leo code text into an <code>Program</code> AST …","The tokenizer to convert Leo code text into tokens.","","","","","Creates a new program from a given file path and source …","Parses an input file at the given file <code>path</code> and <code>source</code> …","","","Dummy span used to appease borrow checker.","Stores a program in tokenized format plus additional …","true if parsing an identifier inside an input file.","Constructs a binary expression <code>left op right</code>.","","","Advances the parser cursor by one token.","Checks whether the current token is <code>tok</code>.","Checks whether the current token is a <code>Token::Int(_)</code>.","","","true if parsing an expression for if and loop statements …","","Returns <code>true</code> if the next token is equal to the given token.","Eats any of the given <code>tokens</code>, returning <code>true</code> if anything …","Eats one of binary operators matching any in <code>tokens</code>.","Removes the next two tokens if they are a pair of …","Eats the next token if its an identifier and returns it.","Removes the next token if it is a [<code>Token::Integer(_)</code>] and …","Emit the error <code>err</code>.","Emit the error <code>err</code>.","Eats the expected <code>token</code>, or errors.","Eats one of the expected <code>tokens</code>, or errors.","Expects an <code>Identifier</code>, or errors.","Returns the argument unchanged.","Handler used to side-channel emit errors from the parser.","Returns true if the next token exists.","","Calls <code>U::from(self)</code>.","Look-ahead <code>dist</code> tokens of <code>self.token</code> and get access to …","At the previous token, return and make an identifier with …","Returns a new <code>ParserContext</code> type given a vector of tokens.","Returns an <code>Expression</code> AST node if the next tokens …","Returns a <code>Block</code> AST node if the next tokens represent a …","Returns an <code>Expression</code> AST node if the next tokens …","Parses a left-associative binary expression …","Returns an <code>Expression</code> AST node if the next tokens …","Returns an <code>Expression</code> AST node if the next tokens …","Returns an <code>Expression</code> AST node if the next tokens …","Returns a <code>Block</code> AST node if the next tokens represent a …","Returns an <code>Expression</code> AST node if the next tokens …","Returns an <code>Expression</code> AST node if the next tokens represent","Parses a circuit or record definition, e.g., …","Returns an <code>Expression</code> AST node if the next tokens …","","Returns a <code>Vec&lt;CircuitMember&gt;</code> AST node if the next tokens …","Returns an <code>Expression</code> AST node if the next tokens represent","Returns a <code>ConditionalStatement</code> AST node if the next tokens …","Returns a <code>ConsoleArgs</code> AST node if the next tokens …","Returns a <code>ConsoleStatement</code> AST node if the next tokens …","Returns a <code>CircuitMember</code> AST node if the next tokens …","Returns a <code>DefinitionStatement</code> AST node if the next tokens …","Returns an <code>Expression</code> AST node if the next tokens …","Returns an <code>Expression</code> AST node if the next tokens …","Parses a tuple of <code>Expression</code> AST nodes.","Returns an <code>Expression</code> AST node if the next token is an …","Returns an [<code>(Identifier, Function)</code>] AST node if the next …","Returns a <code>FunctionInput</code> AST node if the next tokens …","Returns a <code>ParamMode</code> AST node if the next tokens represent …","Parses an import statement <code>import foo.leo;</code>.","Returns a [<code>ParsedInputFile</code>] struct filled with the data …","Parses a single parameter definition: …","Parses a list of <code>T</code>s using <code>inner</code> The opening and closing …","Returns an <code>IterationStatement</code> AST node if the next tokens …","Returns a <code>CircuitMember</code> AST node if the next tokens …","Returns a <code>CircuitMember</code> AST node if the next tokens …","Returns an <code>Expression</code> AST node if the next tokens …","Returns an <code>Expression</code> AST node if the next tokens …","Returns an <code>Expression</code> AST node if the next tokens …","Parse a list separated by <code>,</code> and delimited by parens.","Returns an <code>Expression</code> AST node if the next tokens …","Returns an <code>Expression</code> AST node if the next token is a …","Returns a [<code>(Type, Span)</code>] tuple of AST nodes if the next …","Returns a <code>Program</code> AST if all tokens can be consumed and …","Returns a <code>ReturnStatement</code> AST node if the next tokens …","Parses particular section in the Input or State file. …","Returns an <code>Expression</code> AST node if the next tokens …","Returns a <code>Statement</code> AST node if the next tokens represent …","Returns an <code>Expression</code> AST node if the next tokens …","Parses a type of form <code>(ty_0, ty_1, ...)</code>.","Returns a [<code>(Type, Span)</code>] tuple of AST nodes if the next …","Parses <code>IDENT: TYPE</code>.","Returns an <code>Expression</code> AST node if the next tokens …","Returns a reference to the next token if it is a …","Returns <code>true</code> if the next token is Function or if it is a …","Returns true if the current token is <code>(</code>.","The previous token, i.e., if <code>p.tokens = [&#39;3&#39;, *, &#39;4&#39;]</code>, …","The current token, i.e., if <code>p.tokens = [&#39;3&#39;, *, &#39;4&#39;]</code>, then …","All un-bumped tokens.","","","","Returns an unexpected error at the current token.","","","","","","","","","","Creates a new vector of spanned tokens from a given file …","Yields spanned tokens from the given source code text.","","","","","","","","","","Returns a dummy token at a dummy span.","Eat an identifier, that is, a string matching ‘[a-zA-Z][…","Ensure that <code>string</code> contains no Unicode Bidirectional …","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Checks if a char is a Unicode Bidirectional Override code …","","","","","","","","","","","","","","","","","","","","","","","","","<code>{ ... }</code>","","","","","","","","","Describes delimiters of a token sequence.","","","","","","","","","","","","","","","","","","","","","","","","","","Represents all valid Leo keyword tokens. This defers from …","","","","","","","","","","","","","<code>( ... )</code>","","","","","","","","","","","","","","","","","","","","","","","","Represents all valid Leo syntax tokens.","","","","","","","","","","","","","","","","","","","","","","","","Returns a tuple: [(token length, token)] if the next token …","Returns a tuple: [(integer length, integer token)] if an …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the <code>self</code> token equals a Leo keyword.","Converts <code>self</code> to the corresponding <code>Symbol</code> if it <code>is_keyword</code>.","","Returns the open/close tokens that the delimiter …","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,0,0,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,3,3,3,3,3,3,3,3,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,3,3,3,3,3,3,3,3,3,3,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,3,3,3,3,3,3,3,4,3,4,3,4,3,4,3,4,3,4,3,3,4,3,3,3,3,3,3,3,4,3,4,3,4,3,3,3,4,3,3,4,3,3,4,3,4,3,4,3,4,5,6,7,8,9,10],"f":[null,[[["handler",3],["str",0],["bytepos",3]],["result",6,[["ast",3]]]],[[["handler",3],["str",0],["bytepos",3]],["result",6,[["input",3]]]],null,null,null,null,null,null,[[["handler",3],["str",0],["bytepos",3]],["result",6,[["program",3]]]],[[["handler",3],["str",0],["bytepos",3]],["result",6,[["inputast",3]]]],null,null,null,null,null,[[["expression",4],["expression",4],["binaryoperation",4]],["expression",4]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]]],[[["",0],["token",4]],["bool",0]],[[["",0]],["bool",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],null,[[["usize",0]]],[[["",0],["token",4]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["option",4,[["binaryoperation",4]]]],[[["",0]],["option",4,[["result",6,[["grouptuple",3]]]]]],[[["",0]],["option",4,[["identifier",3]]]],[[["",0]],["result",6]],[[["",0],["parsererror",4]]],[[["",0],["parserwarning",4]]],[[["",0],["token",4]],["result",6,[["span",3]]]],[[["",0]],["result",6,[["span",3]]]],[[["",0]],["result",6,[["identifier",3]]]],[[]],null,[[["",0]],["bool",0]],[[],["usize",0]],[[]],[[["",0],["usize",0]]],[[["",0],["symbol",3]],["identifier",3]],[[["handler",3],["vec",3,[["spannedtoken",3]]]]],[[["",0]],["result",6,[["expression",4]]]],[[["",0]],["result",6,[["statement",4]]]],[[["",0],["expression",4]],["result",6,[["expression",4]]]],[[["",0]],["result",6,[["expression",4]]]],[[["",0]],["result",6,[["expression",4]]]],[[["",0]],["result",6,[["expression",4]]]],[[["",0]],["result",6,[["expression",4]]]],[[["",0]],["result",6,[["block",3]]]],[[["",0]],["result",6,[["expression",4]]]],[[["",0]],["result",6,[["expression",4]]]],[[["",0]],["result",6]],[[["",0],["identifier",3]],["result",6,[["expression",4]]]],[[["",0]],["result",6,[["circuitvariableinitializer",3]]]],[[["",0]],["result",6]],[[["",0]],["result",6,[["expression",4]]]],[[["",0]],["result",6,[["conditionalstatement",3]]]],[[["",0]],["result",6,[["consoleargs",3]]]],[[["",0]],["result",6,[["consolestatement",3]]]],[[["",0]],["result",6,[["circuitmember",4]]]],[[["",0]],["result",6,[["definitionstatement",3]]]],[[["",0]],["result",6,[["expression",4]]]],[[["",0]],["result",6,[["expression",4]]]],[[["",0]],["result",6]],[[["",0]],["result",6,[["expression",4]]]],[[["",0]],["result",6]],[[["",0]],["result",6,[["functioninput",4]]]],[[["",0]],["result",6,[["parammode",4]]]],[[["",0]],["result",6]],[[["",0]],["result",6,[["inputast",3]]]],[[["",0]],["result",6,[["definition",3]]]],[[["",0],["delimiter",4],["option",4,[["token",4]]]],["result",6]],[[["",0]],["result",6,[["iterationstatement",3]]]],[[["",0]],["result",6,[["circuitmember",4]]]],[[["",0]],["result",6,[["circuitmember",4]]]],[[["",0],["expression",4],["identifier",3]],["result",6,[["expression",4]]]],[[["",0]],["result",6,[["expression",4]]]],[[["",0]],["result",6,[["expression",4]]]],[[["",0]],["result",6]],[[["",0]],["result",6,[["expression",4]]]],[[["",0]],["result",6,[["expression",4]]]],[[["",0]],["result",6]],[[["",0]],["result",6,[["program",3]]]],[[["",0]],["result",6,[["returnstatement",3]]]],[[["",0]],["result",6,[["section",3]]]],[[["",0]],["result",6,[["expression",4]]]],[[["",0]],["result",6,[["statement",4]]]],[[["",0]],["result",6,[["expression",4]]]],[[["",0]],["result",6]],[[["",0]],["result",6]],[[["",0]],["result",6]],[[["",0]],["result",6,[["expression",4]]]],[[["",0],["usize",0]],["option",4,[["groupcoordinate",4]]]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],null,null,null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["result",6]],[[["spannedtoken",3]],["parsererror",4]],[[]],null,[[["span",3],["span",3],["str",0],["str",0]],["result",6]],null,null,null,null,null,[[["str",0],["bytepos",3]],["result",6,[["vec",3,[["spannedtoken",3]]]]]],[[["str",0],["bytepos",3]]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["spannedtoken",3]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[["usize",0]]],[[]],[[["peekable",3]],["option",4,[["string",3]]]],[[["str",0]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[],["usize",0]],[[]],[[["char",0]],["bool",0]],[[["",0]],["result",4]],null,[[["",0]]],[[["",0]],["string",3]],null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["token",4]],[[["",0]],["delimiter",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[["usize",0]]],[[["usize",0]]],[[["str",0]],["result",6]],[[["peekable",3]],["result",6]],[[["",0],["token",4]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[["",0]],["bool",0]],[[["",0]],["option",4,[["symbol",3]]]],[[["",0],["token",4]],["bool",0]],[[]],[[["",0]],["result",4]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],null,null,null,null,null,null],"p":[[3,"ParserContext"],[3,"SpannedToken"],[4,"Token"],[4,"Delimiter"],[13,"CommentLine"],[13,"CommentBlock"],[13,"StaticString"],[13,"Identifier"],[13,"Integer"],[13,"AddressLit"]]},\
"leo_passes":{"doc":"leo-passes","t":[0,0,0,0,0,0,0,0,0,0,0,3,12,11,11,12,12,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,0,4,13,13,8,3,11,11,11,11,12,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,12,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,12,11,11,11,11,11,16,16,8,10,0,0,0,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,3,12,11,11,11,11,12,12,11,11,11,11,12,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,0,0,0,0,3,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,12,11,12,11,12,12,11,11,11,11,3,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,11,11,11,11,11,11,12,13,13,13,3,4,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,12,0,0,0,0,5,17,17,17,17,17,17,17,3,17,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,12,11,12,12,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["code_generation","loop_unrolling","pass","static_single_assignment","symbol_table","type_checking","generator","visit_expressions","visit_program","visit_statements","visit_type","CodeGenerator","_handler","borrow","borrow_mut","composite_mapping","current_function","deref","deref_mut","do_pass","drop","from","init","into","new","next_register","try_from","try_into","type_id","variable_mapping","visit_access","visit_assign","visit_associated_function","visit_binary","visit_block","visit_call","visit_circuit","visit_circuit_init","visit_circuit_or_record","visit_conditional","visit_console","visit_definition","visit_err","visit_expression","visit_function","visit_identifier","visit_import","visit_iteration","visit_member_access","visit_program","visit_record","visit_return","visit_return_type","visit_statement","visit_ternary","visit_tuple","visit_type","visit_type_with_visibility","visit_unary","visit_value","range_iterator","unroll_expression","unroll_program","unroll_statement","unroller","Clusivity","Exclusive","Inclusive","LoopBound","RangeIterator","borrow","borrow","borrow_mut","borrow_mut","clusivity","current","deref","deref","deref_mut","deref_mut","drop","drop","end","from","from","init","init","into","into","into_iter","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","new","next","try_from","try_from","try_into","try_into","type_id","type_id","Unroller","block_index","borrow","borrow_mut","current_scope_index","deref","deref_mut","do_pass","drop","enter_block_scope","exit_block_scope","from","handler","init","into","is_unrolling","new","reconstruct_block","reconstruct_definition","reconstruct_function","reconstruct_iteration","symbol_table","try_from","try_into","type_id","unroll_iteration_statement","unroll_single_iteration","Input","Output","Pass","do_pass","rename_expression","rename_program","rename_statement","rename_table","static_single_assigner","RenameTable","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","drop","eq","equivalent","fmt","from","init","into","local_names","lookup","mapping","ne","new","parent","to_owned","try_from","try_into","type_id","update","StaticSingleAssigner","_handler","borrow","borrow_mut","clear_early_returns","clear_phi_functions","condition_stack","counter","deref","deref_mut","do_pass","drop","early_returns","flatten_conditional_statement","from","init","into","is_lhs","new","phi_functions","pop","push","reconstruct_assign","reconstruct_block","reconstruct_call","reconstruct_circuit_init","reconstruct_conditional","reconstruct_definition","reconstruct_function","reconstruct_identifier","reconstruct_return","rename_table","simple_assign_statement","try_from","try_into","type_id","unique_symbol","create","function_symbol","table","variable_symbol","CreateSymbolTable","borrow","borrow_mut","deref","deref_mut","do_pass","drop","from","handler","init","into","new","symbol_table","try_from","try_into","type_id","visit_circuit","visit_function","visit_import","FunctionSymbol","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","fmt","from","id","init","input","into","output","span","to_owned","try_from","try_into","type_id","SymbolTable","borrow","borrow_mut","check_shadowing","circuits","clone","clone_into","default","deref","deref_mut","drop","fmt","from","functions","init","insert_block","insert_circuit","insert_fn","insert_variable","into","lookup_circuit","lookup_fn_scope","lookup_fn_symbol","lookup_scope_by_index","lookup_variable","lookup_variable_mut","new_function_symbol","parent","scope_index","scope_index","scopes","to_owned","try_from","try_into","type_id","variable_in_local_scope","variable_in_parent_scope","variables","Const","Input","Mut","VariableSymbol","VariableType","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","declaration","deref","deref","deref_mut","deref_mut","drop","drop","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","init","init","into","into","ne","ne","span","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_","type_id","type_id","0","check_expressions","check_program","check_statements","checker","return_incorrect_type","BOOLEAN_TYPE","FIELD_TYPE","GROUP_TYPE","INT_TYPES","MAGNITUDE_TYPES","SCALAR_TYPE","SIGNED_INT_TYPES","TypeChecker","UNSIGNED_INT_TYPES","assert_and_return_type","assert_bool_int_type","assert_bool_type","assert_field_group_int_type","assert_field_group_scalar_int_type","assert_field_group_signed_int_type","assert_field_group_type","assert_field_int_type","assert_field_scalar_int_type","assert_field_type","assert_group_type","assert_int_type","assert_magnitude_type","assert_not_tuple","assert_one_of_types","assert_scalar_type","assert_signed_int_type","assert_type","assert_unsigned_int_type","borrow","borrow_mut","check_core_circuit_call","check_eq_types","check_expected_circuit","check_type","deref","deref_mut","do_pass","drop","emit_err","from","handler","has_return","init","into","negate","new","parent","symbol_table","try_from","try_into","type_id","types_to_string","visit_access","visit_assign","visit_binary","visit_block","visit_call","visit_circuit","visit_circuit_init","visit_conditional","visit_console","visit_definition","visit_expression","visit_function","visit_identifier","visit_iteration","visit_literal","visit_return","visit_statement","visit_ternary","visit_tuple","visit_unary"],"q":["leo_passes","","","","","","leo_passes::code_generation","","","","","leo_passes::code_generation::generator","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_passes::loop_unrolling","","","","","leo_passes::loop_unrolling::range_iterator","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_passes::loop_unrolling::unroller","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_passes::pass","","","","leo_passes::static_single_assignment","","","","","leo_passes::static_single_assignment::rename_table","","","","","","","","","","","","","","","","","","","","","","","","","","leo_passes::static_single_assignment::static_single_assigner","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_passes::symbol_table","","","","leo_passes::symbol_table::create","","","","","","","","","","","","","","","","","","","leo_passes::symbol_table::function_symbol","","","","","","","","","","","","","","","","","","","","leo_passes::symbol_table::table","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_passes::symbol_table::variable_symbol","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_passes::symbol_table::variable_symbol::VariableType","leo_passes::type_checking","","","","leo_passes::type_checking::check_expressions","leo_passes::type_checking::checker","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","The Static Single Assignment pass traverses the AST and …","","","","","","","","","","","","Mapping of composite names to a tuple containing metadata …","Reference to the current function.","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Initializes a new <code>CodeGenerator</code>.","A counter to track the next available register.","","","","Mapping of variables to registers.","","","","","","","","","","","","","","","","","","","","","","","Returns one or more types equal to the number of return …","","","","","","","","","","","","","Whether or not a bound is inclusive or exclusive.","","","A trait for whose implementors are concrete values for …","An iterator over a range of values.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","The index of the current block scope.","","","Returns the index of the current scope. Note that if we …","","","","","Enters a child block scope.","Exits the current block scope.","Returns the argument unchanged.","An error handler used for any errors found during …","","Calls <code>U::from(self)</code>.","Are we in the midst of unrolling a loop?","","","","","","The symbol table for the function being processed.","","","","Unrolls an IterationStatement.","A helper function to unroll a single iteration an …","","","A compiler pass consuming <code>Self::Input</code> and returning …","Runs the compiler pass.","","","","","","<code>RenameTable</code> tracks the names assigned by static single …","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Returns the symbols that were renamed in the current scope.","Looks up the new name for <code>symbol</code>, recursively checking the …","The mapping from names in the original AST to new names in …","","Create a new <code>RenameTable</code> with the given parent.","The <code>RenameTable</code> of the parent scope.","","","","","Updates <code>self.mapping</code> with the desired entry. Creates a new …","","An error handler used for any errors found during …","","","Clears the state associated with <code>ReturnStatements</code>, …","Clears the <code>self.phi_functions</code>, returning the ones that …","A stack of condition <code>Expression</code>s visited up to the current …","A strictly increasing counter, used to ensure that new …","","","","","A list containing tuples of guards and expressions …","Introduces a new <code>AssignStatement</code> for non-trivial …","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","A flag to determine whether or not the traversal is on the …","","Phi functions produced by static single assignment.","If the RenameTable has a parent, then <code>self.rename_table</code> is …","Pushes a new scope, setting the current scope as the new …","Transform all <code>AssignStatement</code>s to simple <code>AssignStatement</code>s. …","Reconstructs a <code>Block</code>, flattening its constituent …","Reconstructs <code>CallExpression</code> without visiting the function …","Produces a new <code>CircuitExpression</code> with renamed variables.","Reconstructs a <code>ConditionalStatement</code>, producing phi …","Reconstructs the <code>DefinitionStatement</code> into an …","Reconstructs the <code>Function</code>s in the <code>Program</code>, while …","Produces a new <code>Identifier</code> with a unique name.","Transforms a <code>ReturnStatement</code> into an empty <code>BlockStatement</code>, …","The <code>RenameTable</code> for the current basic block in the AST","Constructs the assignment statement <code>place = expr;</code>.","","","","Return a new unique <code>Symbol</code> from a <code>&amp;str</code>.","","","","","A compiler pass during which the <code>SymbolTable</code> is created. …","","","","","Runs the compiler pass.","","Returns the argument unchanged.","The error handler.","","Calls <code>U::from(self)</code>.","","The <code>SymbolTable</code> constructed by this compiler pass.","","","","","","","An entry for a function in the symbol table.","","","","","","","","","Returns the argument unchanged.","The index associated with the scope in the parent symbol …","","The inputs to the function.","Calls <code>U::from(self)</code>.","The output type of the function.","The <code>Span</code> associated with the function.","","","","","","","","Recursively checks if the symbol table contains an entry …","Maps circuit names to circuit definitions. This field is …","","","","","","","","Returns the argument unchanged.","Functions represents the name of each function mapped to …","","Creates a new scope for the block and stores it in the …","Inserts a circuit into the symbol table.","Inserts a function into the symbol table.","Inserts a variable into the symbol table.","Calls <code>U::from(self)</code>.","Attempts to lookup a circuit in the symbol table.","Returns the scope associated with the function symbol, if …","Attempts to lookup a function in the symbol table.","Returns the scope associated with <code>index</code>, if it exists in …","Attempts to lookup a variable in the symbol table.","Returns a mutable reference to the <code>VariableSymbol</code> if it …","","The parent scope if it exists. For example, the parent …","Returns the current scope index. Increments the scope …","The index of the current scope.","The sub-scopes of this scope.","","","","","Returns true if the variable exists in the local scope","Returns true if the variable exists in any parent scope","The variables defined in a scope. This field is populated …","","","","An entry for a variable in the symbol table.","An enumeration of the different types of variable type.","","","","","","","","","The type of declaration for the variable.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","The <code>Span</code> associated with the variable.","","","","","","","","","The <code>Type</code> of the variable.","","","","","","","","","","","","","","","","","","Use this method when you know the actual type. Emits an …","Emits an error to the handler if the given type is not a …","Emits an error to the handler if the given type is not a …","Emits an error to the handler if the given type is not a …","Emits an error to the handler if the given type is not a …","Emits an error to the handler if the given type is not a …","Emits an error to the handler if the given type is not a …","Emits an error to the handler if the given type is not a …","Emits an error to the handler if the given type is not a …","Emits an error to the handler if the given type is not a …","Emits an error to the handler if the given type is not a …","Emits an error to the handler if the given type is not an …","Emits an error to the handler if the given type is not a …","Emits an error if the type is a tuple.","Emits an error to the error handler if the actual type is …","Emits an error to the handler if the given type is not a …","Emits an error to the handler if the given type is not a …","Emits an error to the error handler if the <code>actual</code> type is …","Emits an error to the handler if the given type is not an …","","","Emits an error if the <code>circuit</code> is not a core library …","Emits an error if the two given types are not equal.","Returns the <code>circuit</code> type and emits an error if the <code>expected</code>…","Emits an error to the handler if the given type is invalid.","","","","","Emits a type checker error.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","Returns a new type checker given a symbol table and error …","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,2,2,0,0,2,3,2,3,3,3,2,3,2,3,2,3,3,2,3,2,3,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,2,3,2,3,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,0,5,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,0,0,11,12,11,12,11,12,11,12,12,11,12,11,12,11,12,11,12,11,12,11,11,12,12,11,12,11,12,11,12,11,12,12,11,12,11,12,11,12,11,12,12,11,12,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],null,null,[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[]],[[["usize",0]]],[[]],[[],["usize",0]],[[]],[[["handler",3]]],null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[["",0],["accessexpression",4]]],[[["",0],["assignstatement",3]],["string",3]],[[["",0],["associatedfunction",3]]],[[["",0],["binaryexpression",3]]],[[["",0],["block",3]],["string",3]],[[["",0],["callexpression",3]]],[[["",0],["circuit",3]],["string",3]],[[["",0],["circuitexpression",3]]],[[["",0],["circuit",3]],["string",3]],[[["",0],["conditionalstatement",3]],["string",3]],[[["",0],["consolestatement",3]],["string",3]],[[["",0],["definitionstatement",3]],["string",3]],[[["",0],["errexpression",3]]],[[["",0],["expression",4]]],[[["",0],["function",3]],["string",3]],[[["",0],["identifier",3]]],[[["",0],["identifier",3],["program",3]],["string",3]],[[["",0],["iterationstatement",3]],["string",3]],[[["",0],["memberaccess",3]]],[[["",0],["program",3]],["string",3]],[[["",0],["circuit",3]],["string",3]],[[["",0],["returnstatement",3]],["string",3]],[[["",0],["type",4],["option",4,[["parammode",4]]]],["vec",3,[["string",3]]]],[[["",0],["statement",4]],["string",3]],[[["",0],["ternaryexpression",3]]],[[["",0],["tupleexpression",3]]],[[["",0],["type",4]],["string",3]],[[["",0],["type",4],["option",4,[["parammode",4]]]],["string",3]],[[["",0],["unaryexpression",3]]],[[["",0],["literal",4]]],null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,null,[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],null,[[]],[[]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["clusivity",4]]],[[["",0]],["option",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["usize",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[]],[[["usize",0]]],[[["",0],["usize",0]]],[[["",0],["usize",0]]],[[]],null,[[],["usize",0]],[[]],null,[[["symboltable",3],["handler",3]]],[[["",0],["block",3]],["block",3]],[[["",0],["definitionstatement",3]],["statement",4]],[[["",0],["function",3]],["function",3]],[[["",0],["iterationstatement",3]],["statement",4]],null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0],["iterationstatement",3],["value",4],["value",4]],["statement",4]],[[["",0],["iterationstatement",3],["loopbound",8]],["statement",4]],null,null,null,[[]],null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["renametable",3]],[[["",0],["",0]]],[[],["renametable",3]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["",0],["renametable",3]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[],["usize",0]],[[]],[[["",0]]],[[["",0],["symbol",3]],["option",4,[["symbol",3]]]],null,[[["",0],["renametable",3]],["bool",0]],[[["option",4,[["box",3,[["renametable",3]]]]]]],null,[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0],["symbol",3],["symbol",3]]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["vec",3]],[[["",0]],["vec",3,[["statement",4]]]],null,null,[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[]],[[["usize",0]]],null,[[["",0],["conditionalstatement",3]],["vec",3,[["statement",4]]]],[[]],[[],["usize",0]],[[]],null,[[["handler",3]]],null,[[["",0]],["renametable",3]],[[["",0]]],[[["",0],["assignstatement",3]],["statement",4]],[[["",0],["block",3]],["block",3]],[[["",0],["callexpression",3]]],[[["",0],["circuitexpression",3]]],[[["",0],["conditionalstatement",3]],["statement",4]],[[["",0],["definitionstatement",3]],["statement",4]],[[["",0],["function",3]],["function",3]],[[["",0],["identifier",3]]],[[["",0],["returnstatement",3]],["statement",4]],null,[[["expression",4],["expression",4]],["statement",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["symbol",3]],null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[]],[[["usize",0]]],[[]],null,[[],["usize",0]],[[]],[[["handler",3]]],null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0],["circuit",3]]],[[["",0],["function",3]]],[[["",0],["program",3]]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["functionsymbol",3]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[]],null,[[],["usize",0]],null,[[]],null,null,[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["symbol",3],["span",3]],["result",6]],null,[[["",0]],["symboltable",3]],[[["",0],["",0]]],[[],["symboltable",3]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[]],null,[[],["usize",0]],[[["",0]],["usize",0]],[[["",0],["symbol",3],["circuit",3]],["result",6]],[[["",0],["symbol",3],["function",3]],["result",6]],[[["",0],["symbol",3],["variablesymbol",3]],["result",6]],[[]],[[["",0],["symbol",3]],["option",4,[["circuit",3]]]],[[["",0],["symbol",3]],["option",4,[["refcell",3]]]],[[["",0],["symbol",3]],["option",4,[["functionsymbol",3]]]],[[["",0],["usize",0]],["option",4,[["refcell",3]]]],[[["",0],["symbol",3]],["option",4,[["variablesymbol",3]]]],[[["",0],["symbol",3]],["option",4,[["variablesymbol",3]]]],[[["usize",0],["function",3]],["functionsymbol",3]],null,[[["",0]],["usize",0]],null,null,[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0],["symbol",3]],["bool",0]],[[["",0],["symbol",3]],["bool",0]],null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["variabletype",4]],[[["",0]],["variablesymbol",3]],[[["",0],["",0]]],[[["",0],["",0]]],null,[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[["",0],["variabletype",4]],["bool",0]],[[["",0],["variablesymbol",3]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[["",0],["variabletype",4]],["bool",0]],[[["",0],["variablesymbol",3]],["bool",0]],null,[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,[[["option",4,[["type",4]]],["option",4,[["type",4]]],["option",4]],["option",4,[["type",4]]]],null,null,null,null,null,null,null,null,null,[[["",0],["type",4],["option",4],["span",3]],["type",4]],[[["",0],["option",4],["span",3]]],[[["",0],["option",4],["span",3]]],[[["",0],["option",4],["span",3]]],[[["",0],["option",4],["span",3]]],[[["",0],["option",4],["span",3]]],[[["",0],["option",4],["span",3]]],[[["",0],["option",4],["span",3]]],[[["",0],["option",4],["span",3]]],[[["",0],["option",4],["span",3]]],[[["",0],["option",4],["span",3]]],[[["",0],["option",4],["span",3]]],[[["",0],["option",4],["span",3]]],[[["",0],["span",3],["type",4]]],[[["",0],["option",4],["span",3]]],[[["",0],["option",4],["span",3]]],[[["",0],["option",4],["span",3]]],[[["",0],["option",4],["type",4],["span",3]]],[[["",0],["option",4],["span",3]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["type",4],["identifier",3]],["option",4,[["coreinstruction",4]]]],[[["",0],["option",4],["option",4],["span",3]]],[[["",0],["identifier",3],["option",4],["span",3]],["type",4]],[[["",0],["string",3],["option",4],["span",3]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[]],[[["usize",0]]],[[["",0],["typecheckererror",4]]],[[]],null,null,[[],["usize",0]],[[]],null,[[["symboltable",3],["handler",3]]],null,null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[],["string",3]],[[["",0],["accessexpression",4]]],[[["",0],["assignstatement",3]]],[[["",0],["binaryexpression",3]]],[[["",0],["block",3]]],[[["",0],["callexpression",3]]],[[["",0],["circuit",3]]],[[["",0],["circuitexpression",3]]],[[["",0],["conditionalstatement",3]]],[[["",0],["consolestatement",3]]],[[["",0],["definitionstatement",3]]],[[["",0],["expression",4]]],[[["",0],["function",3]]],[[["",0],["identifier",3]]],[[["",0],["iterationstatement",3]]],[[["",0],["literal",4]]],[[["",0],["returnstatement",3]]],[[["",0],["statement",4]]],[[["",0],["ternaryexpression",3]]],[[["",0],["tupleexpression",3]]],[[["",0],["unaryexpression",3]]]],"p":[[3,"CodeGenerator"],[4,"Clusivity"],[3,"RangeIterator"],[3,"Unroller"],[8,"Pass"],[3,"RenameTable"],[3,"StaticSingleAssigner"],[3,"CreateSymbolTable"],[3,"FunctionSymbol"],[3,"SymbolTable"],[4,"VariableType"],[3,"VariableSymbol"],[13,"Input"],[3,"TypeChecker"]]},\
"leo_span":{"doc":"","t":[2,2,0,0,0,0,2,0,3,17,17,3,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,13,4,3,3,13,3,3,3,3,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,5,12,11,12,12,12,11,11,11,12,12,11,11,11,5,5,12,5,12,12,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,3,3,8,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,12,14,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,5,11,11,11,11,11,11,5,11,11,11,11,12,3,3,17,7,3,3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,12,12,14,0,12,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17],"n":["Span","Symbol","dropless","source_map","span","span_json","sym","symbol","DroplessArena","HUGE_PAGE","PAGE","TypedArenaChunk","alloc_raw","alloc_raw_without_grow","alloc_slice","borrow","borrow","borrow_mut","borrow_mut","chunks","default","deref","deref","deref_mut","deref_mut","drop","drop","end","end","from","from","grow","init","init","into","into","new","start","start","storage","try_from","try_from","try_into","try_into","type_id","type_id","Custom","FileName","LineCol","MultiByteChar","Real","SourceFile","SourceMap","SourceMapInner","SpanLocation","analyze_source_file","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytepos_to_file_charpos","bytes","clone","clone","clone_into","clone_into","col","col_start","col_stop","contents_of_span","contents_of_span","default","default","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","dummy","end_pos","eq","equivalent","find_line_col","find_source_file","find_source_file_index","fmt","fmt","from","from","from","from","from","from","from","init","init","init","init","init","init","init","inner","into","into","into","into","into","into","into","is_not_test_framework","line","line_contents_of_span","line_start","line_stop","lines","load_file","lookup_file_pos","lookup_line","multibyte_chars","name","ne","new","new_source","normalize_newlines","normalize_src","pos","remove_bom","source_file","source_file","source_files","span_to_location","span_to_string","src","start_pos","to_owned","to_owned","to_string","try_allocate_address_space","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","used_address_space","0","0","0","0","BytePos","CharPos","Pos","Span","add","add","add","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","drop","drop","drop","dummy","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","from_u32","from_u32","from_u32","from_usize","from_usize","from_usize","get_hash","get_hash","hash","hash","hi","impl_pos","init","init","init","into","into","into","is_dummy","lo","ne","ne","ne","new","partial_cmp","partial_cmp","serialize","serialize","sub","sub","to_owned","to_owned","to_owned","to_string","to_u32","to_u32","to_u32","to_usize","to_usize","to_usize","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","SpanMapVisitor","borrow","borrow_mut","deref","deref_mut","deserialize","drop","expecting","fmt","from","init","into","serialize","try_from","try_into","type_id","visit_map","0","InnerInterner","Interner","PRE_DEFINED","SESSION_GLOBALS","SessionGlobals","Symbol","SymbolStr","arena","as_ref","as_str","as_u32","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","consts","create_session_if_not_set_then","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","drop","drop","drop","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","from","get","get_hash","hash","init","init","init","init","init","inner","intern","intern","into","into","into","into","into","ne","new","new","not_sync_send","partial_cmp","partial_cmp","prefill","prefilled","serde_from_symbol","serde_to_symbol","serialize","set","source_map","string","strings","sym","symbol_interner","symbols","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","with_session_globals","AlwaysConst","BHP1024","BHP256","BHP512","BHP768","Class","Const","Constant","CoreFunction","Else","False","For","If","In","Let","Mod","Mut","Pedersen128","Pedersen64","Poseidon2","Poseidon4","Poseidon8","Public","Return","SelfLower","SelfUpper","Star","Static","Struct","True","Type","_nonce","abs","abs_wrapped","add","add_wrapped","address","and","array","assert","bool","circuit","commit","console","constants","context","div","div_wrapped","double","eq","error","field","function","gates","group","gt","gte","hash","i128","i16","i32","i64","i8","import","input","inv","leo","log","lt","lte","main","mul","mul_wrapped","nand","neg","neq","nor","not","or","owner","pow","pow_wrapped","prelude","private","public","record","registers","rem","rem_wrapped","scalar","shl","shl_wrapped","shr","shr_wrapped","square","square_root","state","state_leaf","std","string","sub","sub_wrapped","test","u128","u16","u32","u64","u8","xor"],"q":["leo_span","","","","","","","","leo_span::dropless","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_span::source_map","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_span::source_map::FileName","","leo_span::span","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_span::span_json","","","","","","","","","","","","","","","","","leo_span::symbol","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_span::symbol::sym","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","Defines the <code>Span</code> type used to track where code comes from.","Provides custom serialize/deserialize implementations for …","","","","","","","","Allocates a byte slice with specified layout from the …","Allocates a slice of objects that are copied into the …","","","","","A vector of arena chunks.","","","","","","","","","A pointer to the end of free space.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","A pointer to the start of the free space.","The raw storage for the arena chunk.","","","","","","","Any sort of description for a source.","A file name.","File / Line / Column information on a <code>BytePos</code>.","Identifies an offset of a multi-byte character in a …","A real file.","A single source in the <code>SourceMap</code>.","The source map containing all recorded sources, methods to …","Actual data of the source map. We use this setup for …","Detailed information on a <code>Span</code>.","Finds all newlines, multi-byte characters, and non-narrow …","","","","","","","","","","","","","","","Converts an absolute <code>BytePos</code> to a <code>CharPos</code> relative to the …","The number of bytes, <code>&gt;= 2</code>.","","","","","The (0-based) column offset into the line.","","","Returns contents of a <code>span</code> assumed to be within the given …","Returns the source contents that is spanned by <code>span</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns a dummy location.","The end position of this source in the <code>SourceMap</code>.","","","Finds line column info about a given <code>pos</code>.","Find the source file containing <code>pos</code>.","Find the index for the source file containing <code>pos</code>.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","The actual source map data.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Is the env var <code>LEO_TESTFRAMEWORK</code> not enabled?","The 1-based line number.","Returns the source contents of the lines that <code>span</code> is …","","","Locations of line beginnings in the source code.","Loads the given <code>path</code> and returns a <code>SourceFile</code> for it.","Looks up the file’s (1-based) line number and (0-based …","Finds the line containing the given position. The return …","Locations of multi-byte characters in the source code.","The name of the file that the source came from.","","Creates a new <code>SourceMap</code> given the file <code>name</code>, source …","Registers <code>source</code> under the given file <code>name</code>, returning a …","Replaces <code>\\\\r\\\\n</code> with <code>\\\\n</code> in-place in <code>src</code>.","Normalizes the source code and records the normalizations.","The absolute offset of the character in the <code>SourceMap</code>.","Removes UTF-8 BOM, if any.","","Information on the original source.","All the source files recorded thus far.","Retrives the location (source file, line, col) on the …","Returns a displayable representation of the <code>span</code> as a …","The complete source code.","The start position of this source in the <code>SourceMap</code>.","","","","Attempt reserving address space for <code>size</code> number of bytes.","","","","","","","","","","","","","","","","","","","","","","The address space below this value is currently used by …","","","","","A byte offset.","A character offset.","","The span type which tracks where formatted errors …","Add two spans together. The resulting span is the smallest …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Generates a dummy span with all defaults. Should only be …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","The end (high) position of the span, exclusive. The length …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Is the span a dummy?","The start (low) position of the span, inclusive.","","","","Generate a new span from the <code>start</code>ing and <code>end</code>ing positions.","","","","","","","","","","","","","","","","","","","","","","","","","","This visitor is used by the deserializer to unwrap mappings","","","","","Custom deserialization to enable removing spans from enums.","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","The AST contains a few tuple-like enum variants that …","","","","","","The inner interner. This construction is used to get …","A symbol-to-string interner.","","","All the globals for a compiler sessions.","An interned string.","An alternative to <code>Symbol</code>, useful when the chars within the …","Arena used to allocate the strings, giving us <code>&amp;&#39;static str</code>…","","Convert to effectively a <code>&amp;&#39;static str</code>. This is a slowish …","Converts this symbol to the raw index.","","","","","","","","","","","","","","","","","A helper for <code>symbols</code> defined below. The macro’s job is …","Creates the session globals and then runs the closure <code>f</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the corresponding string for the given symbol.","","","","","","","","","Interns <code>string</code>, returning a <code>Symbol</code> corresponding to it.","Maps a string to its interned representation.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns the corresponding <code>Symbol</code> for the given <code>index</code>.","Create a <code>SymbolStr</code> from a <code>&amp;&#39;static str</code>.","Ensures the type is neither <code>Sync</code> nor <code>Send</code>, so that we …","","","Returns an interner prefilled with <code>init</code>.","Returns an interner prefilled with commonly used strings …","","","","Registration of strings and symbol index allocation is …","The source map used in the compiler.","","A helper for <code>symbols</code> defined below. The macro’s job is …","","The interner for <code>Symbol</code>s used in the compiler.","Creates predefined symbols used throughout the Leo …","","","","","","","","","","","","","","","","","","","","Gives access to read or modify the session globals in <code>f</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,2,1,2,1,1,1,2,1,2,1,2,2,1,1,2,1,1,2,1,2,2,2,1,2,1,2,1,2,1,2,3,0,0,0,3,0,0,0,0,0,4,5,6,7,8,3,9,4,5,6,7,8,3,9,4,9,3,9,3,9,6,5,5,4,7,7,8,4,5,6,7,8,3,9,4,5,6,7,8,3,9,4,5,6,7,8,3,9,5,4,9,9,7,7,7,3,9,4,5,6,7,8,3,9,4,5,6,7,8,3,9,7,4,5,6,7,8,3,9,0,6,7,5,5,4,7,4,4,4,4,9,4,7,0,0,9,0,5,6,8,7,7,4,4,3,9,3,8,4,5,6,7,8,3,9,4,5,6,7,8,3,9,4,5,6,7,8,3,9,8,10,11,12,13,0,0,0,0,14,12,13,14,12,13,14,12,13,14,12,13,14,12,13,12,13,14,12,14,12,13,14,12,13,14,12,14,12,13,14,14,12,13,14,12,13,14,14,12,13,14,12,13,15,12,13,15,12,13,14,12,14,12,14,0,14,12,13,14,12,13,14,14,14,12,13,14,12,13,14,12,12,13,14,12,13,14,15,12,13,15,12,13,14,12,13,14,12,13,14,12,13,0,16,16,16,16,0,16,16,16,16,16,16,0,16,16,16,16,17,0,0,0,0,0,0,0,18,19,17,17,20,18,21,17,19,20,18,21,17,19,17,19,17,19,17,19,0,0,20,20,18,21,17,19,19,20,18,21,17,19,17,20,18,21,17,19,17,19,17,19,17,17,19,19,20,18,21,17,19,21,17,17,20,18,21,17,19,21,21,17,20,18,21,17,19,17,17,19,19,17,19,21,21,17,17,17,18,20,19,0,0,20,0,17,19,17,19,20,18,21,17,19,20,18,21,17,19,20,18,21,17,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,[[["",0],["layout",3]]],[[["",0],["layout",3]],["option",4]],[[["",0]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[],["droplessarena",3]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[["",0]]],null,[[]],[[]],[[["",0],["usize",0]]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[["usize",0]],["typedarenachunk",3]],[[["",0]]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,[[["str",0],["bytepos",3]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["bytepos",3]],["charpos",3]],null,[[["",0]],["filename",4]],[[["",0]],["multibytechar",3]],[[["",0],["",0]]],[[["",0],["",0]]],null,null,null,[[["",0],["span",3]],["string",3]],[[["",0],["span",3]],["option",4,[["string",3]]]],[[],["sourcemap",3]],[[],["sourcemapinner",3]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[]],null,[[["",0],["multibytechar",3]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["bytepos",3]],["option",4,[["linecol",3]]]],[[["",0],["bytepos",3]],["option",4,[["rc",3,[["sourcefile",3]]]]]],[[["",0],["bytepos",3]],["option",4,[["usize",0]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",0]],null,[[["",0],["span",3]],["option",4,[["string",3]]]],null,null,null,[[["",0],["path",3]],["result",6,[["rc",3,[["sourcefile",3]]]]]],[[["",0],["bytepos",3]]],[[["",0],["bytepos",3]],["option",4,[["usize",0]]]],null,null,[[["",0],["multibytechar",3]],["bool",0]],[[["filename",4],["string",3],["bytepos",3]]],[[["",0],["str",0],["filename",4]],["rc",3,[["sourcefile",3]]]],[[["string",3]]],[[["string",3]]],null,[[["string",3]]],null,null,null,[[["",0],["span",3]],["option",4,[["spanlocation",3]]]],[[["",0],["span",3]],["string",3]],null,null,[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0],["u32",0]],["option",4,[["bytepos",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,[[]],[[["bytepos",3]],["bytepos",3]],[[["charpos",3]],["charpos",3]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["span",3]],[[["",0]],["bytepos",3]],[[["",0]],["charpos",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["bytepos",3]],["ordering",4]],[[["",0],["charpos",3]],["ordering",4]],[[],["span",3]],[[],["bytepos",3]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[],["result",4]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[]],[[["",0],["span",3]],["bool",0]],[[["",0],["bytepos",3]],["bool",0]],[[["",0],["charpos",3]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["u32",0]]],[[["u32",0]],["bytepos",3]],[[["u32",0]],["charpos",3]],[[["usize",0]]],[[["usize",0]],["bytepos",3]],[[["usize",0]],["charpos",3]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]]],[[["",0],["",0]]],null,null,[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[["",0]],["bool",0]],null,[[["",0],["span",3]],["bool",0]],[[["",0],["bytepos",3]],["bool",0]],[[["",0],["charpos",3]],["bool",0]],[[["bytepos",3],["bytepos",3]]],[[["",0],["bytepos",3]],["option",4,[["ordering",4]]]],[[["",0],["charpos",3]],["option",4,[["ordering",4]]]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["bytepos",3]],["bytepos",3]],[[["charpos",3]],["charpos",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["u32",0]],[[["",0]],["u32",0]],[[["",0]],["u32",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["deserializer",8]],["result",4,[["span",3]]]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[]],[[],["usize",0]],[[]],[[["span",3],["serializer",8]],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["mapaccess",8]],["result",4]],null,null,null,null,null,null,null,null,null,[[["",0]],["str",0]],[[],["symbolstr",3]],[[],["u32",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["symbol",3]],[[["",0]],["symbolstr",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["symbol",3]],["ordering",4]],[[["",0],["symbolstr",3]],["ordering",4]],null,[[]],[[]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["",0]],["str",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["",0],["symbol",3]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["",0],["symbol",3]],["str",0]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],null,[[["",0],["str",0]],["symbol",3]],[[["str",0]]],[[]],[[]],[[]],[[]],[[]],[[["",0],["symbol",3]],["bool",0]],[[["u32",0]]],[[["str",0]]],null,[[["",0],["symbol",3]],["option",4,[["ordering",4]]]],[[["",0],["symbolstr",3]],["option",4,[["ordering",4]]]],[[]],[[]],[[["nonzerou32",3],["serializer",8]],["result",4]],[[["deserializer",8]],["result",4,[["nonzerou32",3]]]],[[["",0]],["result",4]],null,null,null,null,null,null,null,[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"p":[[3,"DroplessArena"],[3,"TypedArenaChunk"],[4,"FileName"],[3,"SourceFile"],[3,"SpanLocation"],[3,"LineCol"],[3,"SourceMap"],[3,"SourceMapInner"],[3,"MultiByteChar"],[13,"Real"],[13,"Custom"],[3,"BytePos"],[3,"CharPos"],[3,"Span"],[8,"Pos"],[3,"SpanMapVisitor"],[3,"Symbol"],[3,"InnerInterner"],[3,"SymbolStr"],[3,"SessionGlobals"],[3,"Interner"]]},\
"leo_test_framework":{"doc":"The test framework to run integration tests with Leo code …","t":[0,0,0,0,0,13,13,13,13,13,4,3,13,13,11,11,11,11,11,11,11,11,11,11,5,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,5,5,5,3,11,11,11,11,11,11,11,11,12,11,11,11,12,12,11,11,11,11,11,13,13,8,4,8,3,3,13,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,5,11,11,11,11,11,11,5,11,11,12,11,10,12,12,11,10,10,5,5,5,12,11,11,11,11,11,11,11,11,11,11,13,13,13,3,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,5,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11],"n":["error","fetch","output","runner","test","FailedAndShouldntHave","MismatchedTestExpectationLength","MissingTestConfig","Panicked","PassedAndShouldntHave","TestError","TestFailure","UnexpectedError","UnexpectedOutput","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","emit_errors","errors","fmt","fmt","from","from","init","init","into","into","path","to_string","try_from","try_from","try_into","try_into","type_id","type_id","error","error","expected","expected","index","index","index","index","index","output","output","test","test","test","test","test","find_tests","split_tests_one_line","split_tests_two_line","TestExpectation","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","expectation","from","init","into","namespace","outputs","serialize","to_owned","try_from","try_into","type_id","ContinuousLines","Line","Namespace","ParseType","Runner","Test","TestCases","Whole","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","config","content","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","eq","equivalent","fail_categories","fmt","from","from","from","get_benches","init","init","init","into","into","into","is_env_var_set","load_expectations","load_tests","name","new","parse_type","path","path_prefix","process_tests","resolve_namespace","run_test","run_tests","set_hook","take_hook","tests","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Fail","Pass","Skip","TestConfig","TestExpectationMode","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","equivalent","expectation","extra","extract_test_config","fmt","fmt","from","from","init","init","into","into","namespace","serialize","serialize","to_owned","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["leo_test_framework","","","","","leo_test_framework::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_test_framework::error::TestError","","","","","","","","","","","","","","","","leo_test_framework::fetch","","","leo_test_framework::output","","","","","","","","","","","","","","","","","","","","leo_test_framework::runner","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","leo_test_framework::test","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","returns (name, content) for all benchmark samples","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","",""],"i":[0,0,0,0,0,1,1,1,1,1,0,0,1,1,2,1,2,1,2,1,2,1,2,1,0,2,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,4,5,6,3,5,7,4,6,5,6,3,5,7,4,6,0,0,0,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,0,0,0,0,0,9,10,11,9,10,11,9,9,9,10,10,10,11,9,10,11,9,10,11,9,9,9,11,9,10,11,9,0,10,11,9,10,11,9,0,11,11,10,11,12,10,11,11,13,12,0,0,0,11,9,10,11,9,10,11,9,10,11,9,14,14,14,0,0,14,15,14,15,14,14,14,15,14,15,14,15,14,15,14,14,15,15,0,14,15,14,15,14,15,14,15,15,14,15,14,14,15,14,15,14,15],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[["str",0],["result",4],["testexpectationmode",4],["option",4,[["value",4]]],["usize",0]],["option",4,[["testerror",4]]]],null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],null,[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["path",3]]],[[["str",0]],["vec",3,[["str",0]]]],[[["str",0]],["vec",3,[["string",3]]]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["testexpectation",3]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[["usize",0]]],null,[[]],[[],["usize",0]],[[]],null,null,[[["",0]],["result",4]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["parsetype",4]],[[["",0],["",0]]],null,null,[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["",0],["parsetype",4]],["bool",0]],[[["",0],["",0]],["bool",0]],null,[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["vec",3]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[["str",0]],["bool",0]],[[["",0],["path",3]]],[[["",0]],["vec",3,[["testconfig",3]]]],null,[[["str",0]]],[[["",0]],["parsetype",4]],null,null,[[["",0],["vec",3,[["testconfig",3]]]],["vec",3]],[[["",0],["str",0]],["option",4,[["box",3,[["namespace",8]]]]]],[[["",0],["test",3]],["result",4,[["value",4],["string",3]]]],[[["",0],["str",0]]],[[],["arc",3,[["mutex",3,[["option",4,[["string",3]]]]]]]],[[["result",4,[["result",4,[["value",4],["string",3]]],["box",3,[["any",8]]]]],["arc",3,[["mutex",3,[["option",4,[["string",3]]]]]]]],["result",4,[["result",4,[["value",4],["string",3]]],["string",3]]]],null,[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["testexpectationmode",4]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[],["result",4]],[[["usize",0]]],[[["usize",0]]],[[["",0],["testexpectationmode",4]],["bool",0]],[[["",0],["",0]],["bool",0]],null,null,[[["str",0]],["option",4,[["testconfig",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],null,[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]]],"p":[[4,"TestError"],[3,"TestFailure"],[13,"Panicked"],[13,"FailedAndShouldntHave"],[13,"UnexpectedOutput"],[13,"UnexpectedError"],[13,"PassedAndShouldntHave"],[3,"TestExpectation"],[4,"ParseType"],[3,"Test"],[3,"TestCases"],[8,"Namespace"],[8,"Runner"],[4,"TestExpectationMode"],[3,"TestConfig"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};