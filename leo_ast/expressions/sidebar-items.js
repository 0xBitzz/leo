window.SIDEBAR_ITEMS = {"enum":[["AccessExpression","An access expressions, extracting a smaller part out of a whole."],["BinaryOperation","A binary operator."],["Expression","Expression that evaluates to a value."],["Literal","A literal."],["UnaryOperation","A unary operator for a unary expression."]],"mod":[["access",""],["binary",""],["call",""],["err",""],["literal",""],["struct_init",""],["ternary",""],["tuple",""],["unary",""],["unit",""]],"struct":[["BinaryExpression","A binary expression `left op right` of two operands separated by some operator. For example, `foo + bar`."],["CallExpression","A function call expression, e.g.`foo(args)` or `Foo::bar(args)`."],["ErrExpression","Represents a syntactically invalid expression."],["StructExpression","A struct initialization expression, e.g., `Foo { bar: 42, baz }`."],["StructVariableInitializer","An initializer for a single field / variable of a struct initializer expression. That is, in `Foo { bar: 42, baz }`, this is either `bar: 42`, or `baz`."],["TernaryExpression","A ternary conditional expression, that is, `condition ? if_true : if_false`."],["TupleExpression","A tuple expression, e.g., `(foo, false, 42)`."],["UnaryExpression","An unary expression applying an operator to an inner expression."],["UnitExpression","Represents a unit expression."]]};