initSidebarItems({"enum":[["AccessExpression","An access expressions, extracting a smaller part out of a whole."],["BinaryOperation","A binary operator."],["Expression","Expression that evaluates to a value."],["Literal","A literal."],["UnaryOperation","A unary operator for a unary expression."]],"mod":[["access",""],["binary",""],["call",""],["circuit_init",""],["err",""],["literal",""],["ternary",""],["tuple_init",""],["unary",""]],"struct":[["BinaryExpression","A binary expression `left op right` of two operands separated by some operator. For example, `foo + bar`."],["CallExpression","A function call expression, e.g., `foo(args)` or `Foo::bar(args)`."],["CircuitExpression","A circuit initialization expression, e.g., `Foo { bar: 42, baz }`."],["CircuitVariableInitializer","An initializer for a single field / variable of a circuit initializer expression. That is, in `Foo { bar: 42, baz }`, this is either `bar: 42`, or `baz`."],["ErrExpression","Represents a syntactically invalid expression."],["TernaryExpression","A ternary conditional expression, that is, `condition ? if_true : if_false`."],["TupleExpression","A tuple construction expression, e.g., `(foo, false, 42)`."],["UnaryExpression","An unary expression applying an operator to an inner expression."]]});