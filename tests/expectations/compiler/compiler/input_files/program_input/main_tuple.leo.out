---
namespace: Compile
expectation: Pass
outputs:
  - circuit:
      num_public_variables: 0
      num_private_variables: 34
      num_constraints: 34
      at: f125defc4f811f0fbe8d01dc52de44bb493389fc56d273cacb1086c81acad1f8
      bt: 9fd7adedb2e86d2ef5ffbc91d14e45729d1faa5a9b0329d0a0f0011524f527da
      ct: b932b14e686704d456a327fec2d18f9beafb7c7f259278497b3ab5c1bc6d0710
    ir:
      - "decl f0: <0>"
      - "  store &v1, ((v0), (), (), ())"
      - "  tget &v3, v2, 0"
      - "  eq &v4, v3, 10"
      - "  tget &v5, v2, 1"
      - "  eq &v6, v5, true"
      - "  and &v7, v4, v6"
      - "  tget &v8, v2, 2"
      - "  eq &v9, v8, 10"
      - "  and &v10, v7, v9"
      - "  retn v10"
      - "decl f1: <11>"
      - "  retn [false, false, false, false, false, false, false, false]"
      - "decl f2: <12>"
      - "  retn 0"
      - "decl f3: <13>"
      - "  retn [0]"
      - "decl f4: <14>"
      - "  retn 0"
      - "decl f5: <15>"
      - "  retn [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]"
      - "decl f6: <16>"
      - "  retn 0"
      - "decl f7: <17>"
      - "  retn [0, 0, 0, 0, 0, 0, 0, 0]"
      - "decl f8: <18>"
      - "  retn 0"
      - "decl f9: <19>"
      - "  retn [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]"
      - "decl f10: <20>"
      - "  retn 0"
      - "decl f11: <21>"
      - "  retn [0, 0, 0, 0]"
      - "decl f12: <22>"
      - "  retn 0"
      - "decl f13: <23>"
      - "  retn [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]"
      - "decl f14: <24>"
      - "  retn 0"
      - "decl f15: <25>"
      - "  retn [0, 0]"
      - "decl f16: <26>"
      - "  retn 0"
      - "decl f17: <27>"
      - "  retn [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]"
      - "decl f18: <28>"
      - "  retn 0"
      - "decl f19: <29>"
      - "  retn [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"
      - "decl f20: <30>"
      - "  retn 0"
      - "decl f21: <31>"
      - "  retn [false, false, false, false, false, false, false, false]"
      - "decl f22: <32>"
      - "  retn 0"
      - "decl f23: <33>"
      - "  retn [0, 0, 0, 0, 0, 0, 0, 0]"
      - "decl f24: <34>"
      - "  retn 0"
      - "decl f25: <35>"
      - "  retn [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]"
      - "decl f26: <36>"
      - "  retn 0"
      - "decl f27: <37>"
      - "  retn [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"
      - "decl f28: <38>"
      - "  retn 0"
      - "decl f29: <39>"
      - "  retn [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]"
      - "decl f30: <40>"
      - "  retn 0"
      - "decl f31: <41>"
      - "  retn [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"
      - "decl f32: <42>"
      - "  retn 0"
      - "decl f33: <43>"
      - "  retn [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]"
      - "decl f34: <44>"
      - "  retn 0"
      - "decl f35: <45>"
      - "  retn [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"
      - "decl f36: <46>"
      - "  retn 0"
      - "decl f37: <47>"
      - "  retn [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]"
      - "decl f38: <48>"
      - "  retn 0"
      - "decl f39: <49>"
      - "  retn [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"
      - "decl f40: <50>"
      - "  retn 0"
      - "decl f41: <51>"
      - "  retn [false, false, false, false, false, false, false, false]"
      - "decl f42: <52>"
      - "  retn []group"
      - "decl f43: <53>"
      - "  retn [0, 0, 0, 0, 0, 0, 0, 0]"
      - "decl f44: <54>"
      - "  retn []group"
      - "decl f45: <55>"
      - "  retn [false, false, false, false, false, false, false, false]"
      - "decl f46: <56>"
      - "  retn []"
      - "decl f47: <57>"
      - "  retn [0, 0, 0, 0, 0, 0, 0, 0]"
      - "decl f48: <58>"
      - "  retn []"
      - "decl f49: <59>"
      - "  retn [false, false, false, false, false, false, false, false]"
      - "decl f50: <60>"
      - "  retn 'a'"
      - "decl f51: <61>"
      - "  retn [0, 0, 0, 0, 0, 0, 0, 0]"
      - "decl f52: <62>"
      - "  retn 'a'"
      - "decl f53: <63>"
      - "  retn [false, false, false, false, false, false, false, false]"
      - "decl f54: <64>"
      - "  retn false"
      - "decl f55: <65>"
      - "  retn [0, 0, 0, 0, 0, 0, 0, 0]"
      - "decl f56: <66>"
      - "  retn false"
      - "decl f57: <67>"
      - "  retn [false, false, false, false, false, false, false, false]"
      - "decl f58: <68>"
      - "  retn aleo1qnr4dkkvkgfqph0vzc3y6z2eu975wnpz2925ntjccd5cfqxtyu8sta57j8"
      - "decl f59: <69>"
      - "  retn [0, 0, 0, 0, 0, 0, 0, 0]"
      - "decl f60: <70>"
      - "  retn aleo1qnr4dkkvkgfqph0vzc3y6z2eu975wnpz2925ntjccd5cfqxtyu8sta57j8"
      - ""
    output:
      - input_file: input/main_tuple.in
        output:
          registers:
            r0:
              type: bool
              value: "true"
    initial_ast: 96cbeced2b58af807337c697110c8309f69182d428c25e5010997d0067db4e17
    imports_resolved_ast: a898d8959182e11c3247fb50418593311cad70a2c70c44e371c13290f3dc63b8
    canonicalized_ast: a898d8959182e11c3247fb50418593311cad70a2c70c44e371c13290f3dc63b8
    type_inferenced_ast: 37b4d6065d08b6165598ae164da2ef2dd575c388de22e89f8d183fc8dc3e1e8f
